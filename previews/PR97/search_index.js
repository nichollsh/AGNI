var documenterSearchIndex = {"docs":
[{"location":"model/#Model-description","page":"Model description","title":"Model description","text":"","category":"section"},{"location":"model/","page":"Model description","title":"Model description","text":"AGNI models a planetary atmosphere by treating it as a single column (1D) and splitting it up into levels of finite thickness. These levels are defined in pressure-space, and are arranged logarithmically between the surface and the top of the atmosphere. The atmosphere is assumed to be plane-parallel. Quantities such as pressure and temperature are calculated at level-centres and level-edges, while energy fluxes are calculated only at the edges, and thermodynamic properties (e.g. heat capacity) are calculated only at their centres.","category":"page"},{"location":"model/#Radiative-transfer","page":"Model description","title":"Radiative transfer","text":"","category":"section"},{"location":"model/","page":"Model description","title":"Model description","text":"Radiative transfer (RT) refers to the transport of radiation energy through a medium subject to the characteristics of the medium. Radiation passing through an atmosphere is absorbed, emitted, scattered, and reflected. In the context of planetary atmospheres, we also have to handle their surfaces, cloud formation, and radiation from the host star.","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"AGNI simulates RT using SOCRATES, a numerical code written by the UK Met Office which solves the RT equation using a two-stream solution. SOCRATES is accessed using a Julia interface originally written by Stuart Daines. Opacity is handled using the correlated-k approximation, with either random overlap or equivalent extinction used to account for overlapping absorption in mixtures of gases.","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"The model uses k-terms fitted to spectral absorption cross-section data from DACE. The MT_CKD model is used to estimate water continuum absorption cross-sections. Other continuua are derived from the HITRAN tables. Rayleigh scattering and water cloud radiative properties are also included. You can find tools for fitting k-terms and processing line absorption data in my redistribution of SOCRATES on GitHub. The flowchart below outlines how these absorption data are converted into a 'spectral file'.","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"  <img src=\"assets/spectral_flowchart.svg\" width=100% class=\"center\"/>","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"Surface reflectivity can be modelled as a greybody with an albedo from 0 to 1. Alternatively, it can be modelled from empirical single-scattering data that varies with zenith angle and wavelength.","category":"page"},{"location":"model/#Convection","page":"Model description","title":"Convection","text":"","category":"section"},{"location":"model/","page":"Model description","title":"Model description","text":"Convection is a turbulent process that occurs across more than one spatial dimension, so it must be parameterised within 1D models like AGNI. In fact, it is typically parameterised inside 3D global circulation models, as resolving convection is numerically expensive. AGNI uses mixing length theory (MLT) to parameterise atmospheric convection. This is in contrast to convective adjustment, which forcibly adjusts a convectively unstable region of the atmosphere to the corresponding adiabat while ensuring that enthalpy is conserved.","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"MLT directly calculates the energy flux associated with convective heat transport, and thus is the preferred parameterisation within the model. It assumes that parcels of gas are diffused over a characteristic mixing length, transporting energy in the process. This requires choosing a scale for this mixing length, but in practice this has very little impact on the results from the model.","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"When evaluating convective energy fluxes, AGNI first calculates the temperature gradient across each layer of the atmosphere. Convection occurs within each layer that has a lapse rate dTdP greater than the critical lapse rate for triggering Schwarzchild convection. Equations 2 to 6 of Nicholls+2025 describe the calculation of the convective energy flux. The atmosphere is not explicitly split into convecting and non-convecting regions, thereby allowing disconnected regions of convection.","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"The atmosphere is assumed to be hydrostatically supported. The density of the gas mixture is calculated using using Amagat's additive volume law to combine the densities of the components. The densities of each gas component are nominally calculated using the Van der Walls equation of state (EOS). AQUA is implemented as the EOS for water. The Chabrier+2019 EOS is implemented as the EOS for hydrogen. AGNI will fallback to the ideal gas EOS for otherwise unsupported gases.","category":"page"},{"location":"model/#Phase-change","page":"Model description","title":"Phase change","text":"","category":"section"},{"location":"model/","page":"Model description","title":"Model description","text":"Gases release energy (\"latent heat\" or \"enthalpy\") into their surroundings when condensing into a liquid or solid. This is included in the model through a diffusive condensation scheme, which assumes a fixed condensation timescale. This takes place as follows... firstly, the mixing ratios of the gases are updated according to the temperature profile, where rainout occurs until all condensibles are saturated or sub-saturated. The mixing ratios of dry species are increased in order to satisfy the total pressure at condensing levels. The heat released associated with the change in partial pressure of condensible gases is used to calculate a latent heating rate. This is then integrated (from the TOA downwards) to provide a latent heat transport flux at cell-edges. The integrated condensible heat flux is balanced by evaporation at deeper layers.","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"Latent heats are temperature-dependent, using values derived from Coker (2007) and Wagner & Pru√ü (2001). Heat capacities are also temperature-dependent, using values derived from the JANAF database. See the ThermoTools repo for scripts.","category":"page"},{"location":"model/#Stellar-flux","page":"Model description","title":"Stellar flux","text":"","category":"section"},{"location":"model/","page":"Model description","title":"Model description","text":"A key input to the radiation model is the shortwave downward-directed flux from the star at the top of the atmosphere. This is quantified by the bolometric instellation flux, a scale factor, an artificial additional albedo factor, and a zenith angle. All of these may be provided to the model through the configuration file. The model also requires a stellar spectrum scaled to the top of the atmosphere.","category":"page"},{"location":"model/#Equilibrium-chemistry","page":"Model description","title":"Equilibrium chemistry","text":"","category":"section"},{"location":"model/","page":"Model description","title":"Model description","text":"By default, AGNI assumes that the atmosphere composition is \"well-mixed\". This means that the mixing ratios of the species are constant with height. Condensation of a super-saturated volatile will reduce its mixing ratio such that it becomes exactly saturated.","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"With condensation turned off, AGNI can couple to FastChem - a fast numerical model of equilibrium gas-phase chemistry. FastChem takes metallicities (elemental ratios), pressures, and temperatures as input variables. It outputs the partial pressures of a wide range of volatile species, with their mixing ratios set by the equilibrium of their collective thermochemical reactions.","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"AGNI uses the inputted gas partial pressures (or mixing ratios) to calculate the atmosphere's metallicity. When the configuration variable composition.chemistry is set to a value of 1, 2, or 3 FastChem will be enabled. At each step of the solver loop, the metallicity and T-P profile will be provided to FastChem in order to calculate the atmospheric composition at each layer. This new composition is applied when calculating energy fluxes, emission spectra, etc.","category":"page"},{"location":"model/#Obtaining-a-solution","page":"Model description","title":"Obtaining a solution","text":"","category":"section"},{"location":"model/#Summary","page":"Model description","title":"Summary","text":"","category":"section"},{"location":"model/","page":"Model description","title":"Model description","text":"AGNI is designed for modelling planetary atmospheres with high surface pressures and temperatures. This means that the radiative timescale differs by several orders of magnitude across the column, which makes obtaining a solution difficult. To obtain a temperature structure solution that conserves energy more precisely than a time-stepping method, AGNI solves for the temperature structure of the atmosphere as an optimisation problem. This finds the state which conserves energy across all levels and satisfies the required configuration from the user.","category":"page"},{"location":"model/#Solution-types","page":"Model description","title":"Solution types","text":"","category":"section"},{"location":"model/","page":"Model description","title":"Model description","text":"It is necessary to tell AGNI what kind of atmospheric solution to solve for. There are currently a few options available set by the solution_type variable in the configuration file.","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"(1) Aim to conserve energy fluxes throughout the column. The surface temperature is fixed.\n(2) Aim to conserve energy fluxes throughout the column. The surface temperature is set by energy transport through a solid conductive boundary layer of thickness d such that T_s = T_m - fracFdk, where T_m is the mantle temperature and k is the thermal conductivity.\n(3) Solve for a state such that the flux carried at each level is equal to F_textint = sigma T_textint^4, representing the rate at which a planet is losing energy into space.","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"Solution type (1) enforces a fixed surface temperature and instellation, allowing all other temperatures and F_textint to be solved-for as dependent variables. This could be used to model a young planet far from 'radiative equilibrium' (or 'global energy balance') where its surface temperature is very large and the outgoing energy flux is non-zero.","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"Solution type (2) is appropriate for coupling with magma ocean model, where a conductive skin of solidified rock forms at the atmosphere-mantle interface. This skin is a kind of boundary layer that must be parameterised as having a particular thickness and thermal conductivity. It's thought that these layers are important for regulating the energy budget of young rocky planets. This is similar to type (1) except that T_s is allowed to change and T_m is fixed.","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"Solution type (3) is comparable to the implementation inside other atmosphere climate models: the surface temperature is free to change along with the rest of the atmosphere, and AGNI solves for a state of radiative equilibrium.","category":"page"},{"location":"model/#Construction","page":"Model description","title":"Construction","text":"","category":"section"},{"location":"model/","page":"Model description","title":"Model description","text":"The atmosphere is constructed of N levels (cell-centres), corresponding to N+1 interfaces (cell-edges). The RT model takes cell-centre temperatures T_i, pressures p_i, geometric heights, and mixing ratios as input variables at each level i, as well as the surface temperature and incoming stellar flux. In return, it provides cell-edges spectral fluxes F_i at all N+1 interfaces for LW & SW components and upward & downward streams. Convective fluxes can be estimated using the MLT scheme, condensation fluxes from the condensation scheme, and sensible heat from a simple turbulent kinetic energy (TKE) approximation (see Pierrehumbert+2010).","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"The total upward-directed energy flux F_i describes the total upward-directed energy transport (units of textW m^-2) from cell i into cell i-1 above (or into space for i=1). For energy to be conserved throughout the column, it must be true that F_i = F_t text  forall text  i where F_t is the total amount of energy being transported out of the planet. In global radiative equilibrium, F_t = 0.","category":"page"},{"location":"model/#Definition-of-residuals","page":"Model description","title":"Definition of residuals","text":"","category":"section"},{"location":"model/","page":"Model description","title":"Model description","text":"We can use this construction to solve for the temperature profile of the atmosphere as an N+1-dimensional optimisation problem. This directly solves for T(p) at radiative-convective equilibrium without having to invoke heating rate calculations, thereby avoiding slow convergence in regions of the atmosphere with long radiative timescales. The residuals vector (length N+1)","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"\nbmr =\n\nbeginpmatrix\nr_i     \nr_i+1 \n     \nr_N     \nr_N+1\nendpmatrix\n\n=\n\nbeginpmatrix\nF_i+1 - F_i     \nF_i+2 - F_i+1 \n     \nF_N+1 - F_N     \nF_N+1 - F_t\nendpmatrix","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"is what we aim to minimise as our 'objective function', subject to the solution vector of cell-centre temperatures","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"bmx =\n\nbeginpmatrix\nT_i     \nT_i+1 \n     \nT_N     \nT_s\nendpmatrix","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"where T_s is the surface temperature. Cell-edge temperatures in the bulk atmosphere are interpolated from cell-centres. The bottom- and top-most cell edge temperatures are extrapolated by estimation of dTd log p. Cell properties (heat capacity, gravity, density, average molecular weight, etc.) are consistently updated at each evaluation of bmr. Condensation/rainout are also handled at each evaluation of bmr in order to avoid supersaturation.","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"The model converges when the cost function c(bmx) = sqrtsum_i r_i satisfies the condition","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"c(bmx)  c_a + c_r cdot undersetimax text  F_i","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"which represents a state where the fluxes are sufficiently conserved. The quantities c_a and c_r are the absolute and relative tolerances provided by the user (parameters conv_atol and conv_rtol in solver.solve_energy!()).","category":"page"},{"location":"model/#Iterative-steps","page":"Model description","title":"Iterative steps","text":"","category":"section"},{"location":"model/","page":"Model description","title":"Model description","text":"The model solves for bmx iteratively, starting from some initial guess. The initial guess should be any reasonable temperature profile which is not significantly cooler than the expected solution. The flowchart below broadly outlines the solution process.","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"  <img src=\"assets/model_flowchart.svg\" width=50% class=\"center\"/>","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"The Jacobian matrix bmJ represents the directional gradient of the residuals with respect to the solution vector. It is a square matrix with elements set according to","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"J_uv = fracpartial r_upartial x_v","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"AGNI estimates bmJ using finite-differences, requiring N+1 evalulations of bmr in order to fill the matrix. This corresponds to 2(N+1)+1 objective function calculations under a 2nd order central-difference scheme. Each level v with temperature x_v is perturbed by an amount pm varepsilon x_v in order to fill a single column of bmJ. As such, it can be expensive to construct a full Jacobian, especially when it is discarded at the end of each iteration. To reduce the total number of calculations, AGNI retains some of the columns in bmJ between model iterations. This assumes that the second derivative of the residuals is small. A column v is retained only when","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"max r_i lt 07 text for  i in v-1 v v+1","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"and when c(bmx)10 does not satisfy the convergence criteria.","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"With a Jacobian constructed, we can calculate an update bmd to the solution vector bmx rightarrow bmx + bmd. This is primarily done via the Newton-Raphson method","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"bmd = -bmJ^-1 bmr","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"but can alternatively be performed via the Gauss-Newton and Levenberg‚ÄìMarquardt methods.","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"It is possible for the model to become stuck in a local minimum, leading to very small values of bmd. This is identified when c(bmx) has seen little change over the last few iterations. When this occurs, the model is 'nudged' by scaling the update via","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"bmd rightarrow 3 bmd","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"In many cases bmd is too large, leading to instabilities. This is due to the non-convexity of the solution space, and the somewhat discontinuous nature of the physics involved (particularly in its temperature derivatives). When bmdd_textmax, the update is crudely scaled via","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"bmd rightarrow  d_textmax hatbmd","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"The update may also be scaled by a linesearch","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"bmd rightarrow alpha bmd","category":"page"},{"location":"model/","page":"Model description","title":"Model description","text":"on alpha. This is applied if the full step bmd would increase the cost by an unacceptable amount. If the model is close to convergence then a golden-section search method is used to determine the optimal alpha, otherwise a backtracking method is used.  This means that the model is (mostly) able to avoid oscillating around a solution. All three of these scalings to bmd preserve its direction.","category":"page"},{"location":"model/#Other-features","page":"Model description","title":"Other features","text":"","category":"section"},{"location":"model/","page":"Model description","title":"Model description","text":"AGNI can calculate emission spectra, provided with T(p) and the volume mixing ratios of the gases. This is performed using the same RT as the RCE calculations, so is limited in resolution by the choice of correlated-k bands. Similarly, the longwave contribution function can also be calculated.","category":"page"},{"location":"model/#Julia-and-Fortran","page":"Model description","title":"Julia and Fortran","text":"","category":"section"},{"location":"model/","page":"Model description","title":"Model description","text":"AGNI is primarily written in Julia, while SOCRATES itself is written in Fortran. Julia was chosen because it allows the SOCRATES binaries to be included in the precompiled code, which significantly improves performance.","category":"page"},{"location":"usage/#Running-the-model","page":"Running the model","title":"Running the model","text":"","category":"section"},{"location":"usage/","page":"Running the model","title":"Running the model","text":"First, follow the Getting started instructions. Only read on once you have confirmed that the code is working.","category":"page"},{"location":"usage/#Input-data-files","page":"Running the model","title":"Input data files","text":"","category":"section"},{"location":"usage/","page":"Running the model","title":"Running the model","text":"The minimal input data required to run the model will have been downloaded automatically. If you require more data, such as additional stellar spectra or opacities, then these can also be easily obtained using the get_data script in the AGNI root directory. To see how to use this script, run it without arguments like so:","category":"page"},{"location":"usage/","page":"Running the model","title":"Running the model","text":"./src/get_data.sh","category":"page"},{"location":"usage/","page":"Running the model","title":"Running the model","text":"Opacities are contained within \"spectral files\". Use the table within res/spectral_files/reference.pdf to decide which spectral files are best for you.","category":"page"},{"location":"usage/","page":"Running the model","title":"Running the model","text":"For example, if you wanted to get the spectral file \"Honeyside48\" you would run:","category":"page"},{"location":"usage/","page":"Running the model","title":"Running the model","text":"./src/get_data.sh anyspec Honeyside 48","category":"page"},{"location":"usage/#Tutorials","page":"Running the model","title":"Tutorials","text":"","category":"section"},{"location":"usage/","page":"Running the model","title":"Running the model","text":"There are Jupyter notebooks containing tutorials in the tutorials/ directory of the repository.","category":"page"},{"location":"usage/#General-execution","page":"Running the model","title":"General execution","text":"","category":"section"},{"location":"usage/","page":"Running the model","title":"Running the model","text":"The environment variable RAD_DIR must point to the SOCRATES installation directory. This is required for AGNI to find the SOCRATES libraries. The best way to do this is to add RAD_DIR=path/to/socrates/folder/ to your shell rc file (e.g. ~/.bashrc).","category":"page"},{"location":"usage/","page":"Running the model","title":"Running the model","text":"Then to use the model, simply run","category":"page"},{"location":"usage/","page":"Running the model","title":"Running the model","text":"./agni.jl [cfg]","category":"page"},{"location":"usage/","page":"Running the model","title":"Running the model","text":"where [cfg] is the path to the desired configuration file. If [cfg] is not passed, then the default configuration file will be used.","category":"page"},{"location":"usage/#Configuration","page":"Running the model","title":"Configuration","text":"","category":"section"},{"location":"usage/","page":"Running the model","title":"Running the model","text":"AGNI configuration files are formatted using TOML. There are examples in res/config/. The default configuration file contains comments explaining the purpose of each parameter, although some are explained in greater detail below. Take care to format the variables in the TOML file correctly. There are no 'default values'. Not all parameters are required in all cases, but the model will return an error naming any parameters which are both necessary and absent.","category":"page"},{"location":"usage/","page":"Running the model","title":"Running the model","text":"Broadly, the configuration files are broken up into four sections:","category":"page"},{"location":"usage/","page":"Running the model","title":"Running the model","text":"[planet] -  general characteristics of the planet\n[files] - input/output files and other paths\n[composition] - atmospheric composition and chemistry\n[execution] - what the model should do\n[plots] - which plots should be produced","category":"page"},{"location":"usage/","page":"Running the model","title":"Running the model","text":"Some parameters:","category":"page"},{"location":"usage/","page":"Running the model","title":"Running the model","text":"files.input_sf is the file path to the \"spectral file\" containing opacity data. Several spectral files are packged with AGNI, but you can find more online via the Open Science Framework.\nexecution.solution_type tells the model which state to solve for. The allowed values (integers) are...\n1 : zero flux divergence at fixed tmp_surf\n2 : zero flux divergence such that the conductive skin (CBL) conserves energy flux with fixed tmp_magma\n3 : the net flux (up minus down) at each layer is equal to flux_int\nSee the Model description page for an explanation of these solution types.\nexecution.solver tells the model which solver to use. Allowed solvers are...\n[empty string] : no solving takes place, so the model just calculates fluxes using the initial state\nnewton : the Newton-Raphson algorithm is used\ngauss  : the Gauss-Newton algorithm is used\nlevenberg : the Levenberg‚ÄìMarquardt algorithm is used\nexecution.initial_state describes the initial temperature profile applied to the atmosphere. This is a list of strings which are applied in the given order, which allows the user to describe a specific state as required. The descriptors are listed below, some of which take a single argument that needs to immediately follow the descriptor in the list order.\ndry              : integrate the dry adiabatic lapse rate from the surface upwards\nstr,       arg : apply an isothermal stratosphere at arg kelvin\niso,       arg : set the whole atmosphere to be isothermal at arg kelvin\ncsv,       arg : set the temperature profile using the CSV file at the file path arg\nsat,       arg : apply Clausius-Clapeyron saturation curve for the gas arg\nncdf,      arg : load profile from the NetCDF file located at arg\nloglin,    arg : log-linear profile between tmp_surf at the bottom and arg at the top\nana              : use the Guillot (2010) analytical temperature solution\nFor example, setting initial_state = [\"dry\", \"sat\", \"H2O\", \"str\", \"180\"] will set T(p) to follow the dry adiabat from the surface, the water condensation curve above that, and then to be isothermal at 180 K until the top of the model.\ncomposition.chemistry describes the type of chemistry to implement within the model. This is handled externally by FastChem, so you must set the environment variable FC_DIR to point to the FastChem directory. The allowed values (integers) are...\n0 : Disabled\n1 : Equilibrium, gas phase only\n2 : Equilibrium, with condensation (condensates retained)\n3 : Equilibrium, with condensation (condensates rained out)\nMore information on the chemistry is available on the Equilibrium chemistry page","category":"page"},{"location":"usage/#Outputs","page":"Running the model","title":"Outputs","text":"","category":"section"},{"location":"usage/","page":"Running the model","title":"Running the model","text":"Results are optionally plotted and animated, and data will be saved as NetCDF or CSV files.","category":"page"},{"location":"usage/#Accessing-AGNI-from-Python","page":"Running the model","title":"Accessing AGNI from Python","text":"","category":"section"},{"location":"usage/","page":"Running the model","title":"Running the model","text":"It is possible to interact with AGNI from Python. This is best done with the juliacall package from PythonCall.jl.","category":"page"},{"location":"usage/","page":"Running the model","title":"Running the model","text":"Coupling with Python is done via juliacall within the modular PROTEUS framework, which couples AGNI self-consistently to models of planetary interior evolution and volatile outgassing. You can see this implemented in agni.py within the PROTEUS source code.","category":"page"},{"location":"usage/","page":"Running the model","title":"Running the model","text":"A skeleton example is given below:","category":"page"},{"location":"usage/","page":"Running the model","title":"Running the model","text":"\n# Import juliacall\nfrom juliacall import Main as jl\n\n# Import AGNI\njl.seval(\"using Pkg\")\njl.Pkg.activate(AGNI_ROOT_DIR)  # <---- set AGNI_ROOT_DIR to your installation path\njl.seval(\"import AGNI\")\njl.AGNI.setup_logging(\"out.log\", 1)\n\n# Setup atmosphere\natmos = jl.AGNI.atmosphere.Atmos_t()\njl.AGNI.atmosphere.setup_b(atmos, ...)   # <--- complete function arguments as per docstring in `AGNI.atmosphere.setup!()`\n\n# Allocate atmosphere\njl.AGNI.atmosphere.allocate_b(atmos, STAR_SPECTRUM_FILE)   # <-- provide path to spectrum\n\n# Solve T(p)\njl.AGNI.solver.solve_energy_b(atmos)\n\n# Write results to a file\njl.AGNI.save.write_ncdf(atmos, \"out.nc\")","category":"page"},{"location":"troubleshooting/#Troubleshooting","page":"Troubleshooting","title":"Troubleshooting","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"This page may be useful if you are having problems. However, I would suggest that you also double check the Getting started instructions.","category":"page"},{"location":"troubleshooting/#Julia-errors-on-start,-potentially-referencing-the-CURL-library","page":"Troubleshooting","title":"Julia errors on start, potentially referencing the CURL library","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"It is important that the shell environment variable LD_LIBRARY_PATH is not set when running AGNI. This will cause Julia to use the wrong libraries, which will causes problems. You can unset this variable or reset using either of the following commands","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"unset LD_LIBRARY_PATH\nexport LD_LIBRARY_PATH=\"\"","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"If this does not help, it's possible that you are using a Julia distribution provided by your system package manager. It's important that you only use Julia distributed from the official website.","category":"page"},{"location":"troubleshooting/#Cannot-find-SOCRATES","page":"Troubleshooting","title":"Cannot find SOCRATES","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check the installation instructions. Have you set RAD_DIR? Try running l_run_cdf in the terminal; if this fails, then SOCRATES has not compiled or you haven't added it to your PATH. It is necessary to set the RAD_DIR variable for the environment in which you are running AGNI, so it is best to add it to your shell's rc file permanently.","category":"page"},{"location":"troubleshooting/#Spectral-file-does-not-exist","page":"Troubleshooting","title":"Spectral file does not exist","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"First, check the path in the configuration file.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Download additional spectral files using the get_data script. For example, for additional pure-steam spectral files you would run:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"./src/get_data.sh steam","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"When you downloaded AGNI it should have obtained a \"basic\" set of data. This will include a reference guide located at res/spectral_files/reference.pdf. Using the table inside this PDF file, you can decide which set of opacities are appropriate for you.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"For example, to download the spectral file Honeyside16 you would then run:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"./src/get_data.sh anyspec Honeyside 16","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Note the space between the codename and number of bands. Other spectral files can be downloaded from OSF: https://osf.io/vehxg/.","category":"page"},{"location":"troubleshooting/#Cannot-find-FastChem","page":"Troubleshooting","title":"Cannot find FastChem","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"You need to install FastChem. This can be done by running the command:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"./src/get_fastchem.sh","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"and then adding FC_DIR to your shell rc file.","category":"page"},{"location":"troubleshooting/#Finally...","page":"Troubleshooting","title":"Finally...","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"If you are still stuck, or feel that there is a problem with the code, then you can contact the authors using the information on the main page.","category":"page"},{"location":"manual/#Development-manual","page":"Development","title":"Development manual","text":"","category":"section"},{"location":"manual/#Contributing","page":"Development","title":"Contributing","text":"","category":"section"},{"location":"manual/","page":"Development","title":"Development","text":"If you are interested in contributing to the model, please contact the developers using the information on the main page.","category":"page"},{"location":"manual/#Coding-style","page":"Development","title":"Coding style","text":"","category":"section"},{"location":"manual/","page":"Development","title":"Development","text":"Indentation uses 4 spaces, no tabs.\nFunction names should be lowercase, with words separated by underscores .\nLines should aim to have a length of no more than 92 characters.\nAll functions should have docstrings, ideally with Arguments and Returns listed.\nMore comments are always better, even if they seem redundant.\nUse type hinting where possible.\nPrint statements should be made through the logger where possible.\nThe core package code should not contain global variables, except in the phys module.","category":"page"},{"location":"manual/#Code-reference","page":"Development","title":"Code reference","text":"","category":"section"},{"location":"manual/#Atmosphere-initialisation-and-variables","page":"Development","title":"Atmosphere initialisation and variables","text":"","category":"section"},{"location":"manual/","page":"Development","title":"Development","text":"Functions from atmosphere.jl.","category":"page"},{"location":"manual/","page":"Development","title":"Development","text":"Modules = [AGNI.atmosphere]","category":"page"},{"location":"manual/#AGNI.atmosphere.allocate!-Tuple{AGNI.atmosphere.Atmos_t, String}","page":"Development","title":"AGNI.atmosphere.allocate!","text":"Allocate atmosphere arrays, prepare spectral files, and final steps.\n\nWill not modify spectral file if stellar_spectrum` is an empty string.\n\nArguments:\n\natmos::Atmos_t                 the atmosphere struct instance to be used.\nstellar_spectrum::String       path to stellar spectrum csv file\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.atmosphere.calc_layer_props!-Tuple{AGNI.atmosphere.Atmos_t}","page":"Development","title":"AGNI.atmosphere.calc_layer_props!","text":"Calculate properties within each layer of the atmosphere (e.g. density, mmw).\n\nArguments:     - atmos::Atmos_t          the atmosphere struct instance to be used.     - ignore_errors::Bool     do not generate errors from hydrostatic integrator.\n\nReturns:     - ok::Bool                function result is ok\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.atmosphere.calc_observed_rho!-Tuple{AGNI.atmosphere.Atmos_t}","page":"Development","title":"AGNI.atmosphere.calc_observed_rho!","text":"Calculate observed radius and bulk density.\n\nThis is done at the layer probed in transmission, which is set to a fixed pressure.\n\nArguments:     - atmos::Atmos_t          the atmosphere struct instance to be used.     - p_ref::Float64          observed pressure level [Pa]\n\nReturns:     - transspec_rho::Float64  the bulk density observed in transmission\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.atmosphere.calc_profile_cpkc!-Tuple{AGNI.atmosphere.Atmos_t}","page":"Development","title":"AGNI.atmosphere.calc_profile_cpkc!","text":"Calculate specific heat capacity and thermal conductivity for all layers.\n\nSpecific heat per unit mass: J K-1 kg-1. Thermal conductivity: W m-1 K-1.\n\nArguments:     - atmos::Atmos_t      the atmosphere struct instance to be used.\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.atmosphere.calc_profile_density!-Tuple{AGNI.atmosphere.Atmos_t}","page":"Development","title":"AGNI.atmosphere.calc_profile_density!","text":"Calculate the mass-density for all layers.\n\nRequires temperature, pressure, mmw to be already have been set.\n\nArguments:     - atmos::Atmos_t      the atmosphere struct instance to be used.\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.atmosphere.calc_profile_mmw!-Tuple{AGNI.atmosphere.Atmos_t}","page":"Development","title":"AGNI.atmosphere.calc_profile_mmw!","text":"Calculate mean molecular weight for all layers.\n\nMMW stored as kg/mol.\n\nArguments:     - atmos::Atmos_t      the atmosphere struct instance to be used.\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.atmosphere.calc_profile_radius!-Tuple{AGNI.atmosphere.Atmos_t}","page":"Development","title":"AGNI.atmosphere.calc_profile_radius!","text":"Calculate radius and gravity for all layers.\n\nPerforms hydrostatic integration from the ground upwards. Requires density, temperature, pressure to have already been set.\n\nArguments:     - atmos::Atmos_t          the atmosphere struct instance to be used.     - ignore_errors::Bool     do not generate errors from hydrostatic integrator.\n\nReturns:     - ok::Bool                function result is ok\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.atmosphere.calc_single_cpkc!-Tuple{AGNI.atmosphere.Atmos_t, Int64}","page":"Development","title":"AGNI.atmosphere.calc_single_cpkc!","text":"Calculate specific heat capacity and thermal conductivity of a single layer.\n\nSpecific heat per unit mass: J K-1 kg-1. Thermal conductivity: W m-1 K-1.\n\nArguments:     - atmos::Atmos_t      the atmosphere struct instance to be used.     - idx::Int            index of the layer\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.atmosphere.calc_single_density!-Tuple{AGNI.atmosphere.Atmos_t, Int64}","page":"Development","title":"AGNI.atmosphere.calc_single_density!","text":"Calculate the mass-density of a single layer.\n\nRequires temperature, pressure, mmw to be already have been set.\n\nArguments:\n\natmos::Atmos_t      the atmosphere struct instance to be used.\nidx::Int            index of the layer\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.atmosphere.estimate_photosphere!-Tuple{AGNI.atmosphere.Atmos_t}","page":"Development","title":"AGNI.atmosphere.estimate_photosphere!","text":"Estimate photosphere.\n\nEstimates the location of the photosphere by finding the median of the contribution function in each band (0.2 um to 150 um), and then finding the pressure level at which these median values are maximised.\n\nArguments:     - atmos::Atmos_t          the atmosphere struct instance to be used.\n\nReturns:     - p_ref::Float64          pressure level of photosphere [Pa]\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.atmosphere.generate_pgrid!-Tuple{AGNI.atmosphere.Atmos_t}","page":"Development","title":"AGNI.atmosphere.generate_pgrid!","text":"Generate pressure grid.\n\nAlmost-equally log-spaced between pboa and pboa. The near-surface layers are smaller than they would be on an equally log-spaced grid, to avoid f numerical weirdness at the bottom boundary.\n\nArguments:\n\natmos::Atmos_t              the atmosphere struct instance to be used.\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.atmosphere.integrate_hydrograv-NTuple{5, Float64}","page":"Development","title":"AGNI.atmosphere.integrate_hydrograv","text":"Integrate hydrostatic and gravity equations across a pressure interval.\n\nUses the classic fourth-order Runge-Kutta method.\n\nArguments:     - r0::Float64     radius   at start of interval [m]     - g0::Float64     gravity  at start of interval [m s-2]     - p0::Float64     pressure at start of interval [Pa]     - p1::Float64     pressure at end   of interval [Pa]     - rho::Float64    density throughout interval, constant [kg m-3]\n\nReturns:     - r1::Float64     radius at end of interval [m]\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.atmosphere.set_tmpl_from_tmp!-Tuple{AGNI.atmosphere.Atmos_t}","page":"Development","title":"AGNI.atmosphere.set_tmpl_from_tmp!","text":"Set cell-edge temperatures from cell-centre values.\n\nUses interpolation within the bulk of the column and extrapolation for the topmost edge.\n\nArguments:\n\natmos::Atmos_t            the atmosphere struct instance to be used.\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.atmosphere.setup!-Tuple{AGNI.atmosphere.Atmos_t, String, String, String, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Int64, Float64, Float64, Any, String}","page":"Development","title":"AGNI.atmosphere.setup!","text":"Set parameters of the atmosphere.\n\nThis is used to set up the struct immediately after creation. It must be     done before allocate!() is called, and before any RT calculcations     are performed.\n\nArguments:\n\natmos::Atmos_t                  the atmosphere struct instance to be used.\nROOT_DIR::String                AGNI root directory.\nOUT_DIR::String                 Output directory.\nspfile::String                  path to spectral file.\ninstellation::Float64           bolometric solar flux at the top of the atmosphere [W m-2]\ns0_fact::Float64                scale factor to account for planetary rotation (i.e. S0^*/S0 in Cronin+14)\nalbedo_b::Float64               bond albedo scale factor applied to instellation in order to imitate shortwave reflection\nzenith_degrees::Float64         angle of radiation from the star, relative to the zenith [degrees].\ntmp_surf::Float64               effective surface temperature to provide upward longwave flux at the bottom of the atmosphere [K].\ngravity::Float64                gravitational acceleration at the surface [m s-2].\nradius::Float64                 planet radius at the surface [m].\nnlev_centre::Int                number of model levels.\np_surf::Float64                 total surface pressure [bar].\np_top::Float64                  total top of atmosphere pressure [bar].\nmf_dict::Dict                   dictionary of VMRs in the format (key,value)=(gas,mf).\nmf_path::String                 path to file containing VMRs at each level.\n\nOptional arguments:\n\ncondensates                     list of condensates (gas names).\nsurface_material::String        surface material (default is \"greybody\", but can point to file instead).\nalbedo_s::Float64               grey surface albedo used when surface_material=\"greybody\".\ntmp_floor::Float64              temperature floor [K].\nC_d::Float64                    turbulent heat exchange coefficient [dimensionless].\nU::Float64                      surface wind speed [m s-1].\nKzz_floor::Float64              eddy diffusion coefficient, min value [cm2 s-1]\ntmp_magma::Float64              mantle temperature [K] for sol_type==2.\nskin_d::Float64                 skin thickness [m].\nskin_k::Float64                 skin thermal conductivity [W m-1 K-1].\noverlap_method::String          gaseous overlap scheme (ro: rand overlap, ee: equiv extinct, rorr: ro+resort+rebin).\ntarget_olr::Float64             target OLR [W m-2] for sol_type==4.\nflux_int::Float64               planet's internal flux for sol_type==3.\nall_channels::Bool              use all channels available for RT?\nflag_rayleigh::Bool             include rayleigh scattering?\nflag_gcontinuum::Bool           include generalised continuum absorption?\nflag_continuum::Bool            include continuum absorption?\nflag_aerosol::Bool              include aersols?\nflag_cloud::Bool                include clouds?\nreal_gas::Bool                  use real gas EOS where possible\nthermo_functions::Bool          use temperature-dependent thermodynamic properties\nuse_all_gases::Bool             store information on all supported gases, incl those not provided in cfg\n\nReturns:     Nothing\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.atmosphere.water_cloud!-Tuple{AGNI.atmosphere.Atmos_t}","page":"Development","title":"AGNI.atmosphere.water_cloud!","text":"Manually set water cloud properties at saturated levels.\n\nUses the default mass mixing ratio, area fraction, and droplet sizes. This function is redundant if condensation is done via chemsitry.handle_saturation!().\n\nArguments:\n\natmos::Atmos_t          the atmosphere struct instance to be used.\n\n\n\n\n\n","category":"method"},{"location":"manual/#Energy-flux-evaluation","page":"Development","title":"Energy flux evaluation","text":"","category":"section"},{"location":"manual/","page":"Development","title":"Development","text":"Functions from energy.jl.","category":"page"},{"location":"manual/","page":"Development","title":"Development","text":"Modules = [AGNI.energy]","category":"page"},{"location":"manual/#AGNI.energy.calc_fluxes!-Tuple{AGNI.atmosphere.Atmos_t, Vararg{Bool, 4}}","page":"Development","title":"AGNI.energy.calc_fluxes!","text":"Calculate energy flux at each level.\n\nCalculates flux components (radtrans, convection, etc.) and sums them to get total flux. Also updates thermodynamic properties (heat capacity, density, etc.) at each layer.\n\nArguments:\n\natmos::Atmos_t                  the atmosphere struct instance to be used.\nlatent::Bool                    include condensation flux\nconvect::Bool                   include MLT convection flux\nsens_heat::Bool                 include TKE sensible heat transport\nconduct::Bool                   include conductive heat transport\nconvect_sf::Float64             scale factor applied to convection fluxes\nlatent_sf::Float64              scale factor applied to phase change fluxes\ncalc_cf::Bool                   calculate LW contribution function?\nrainout::Bool                   allow rainout ( do not reset VMRs to dry values )\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.energy.calc_hrates!-Tuple{AGNI.atmosphere.Atmos_t}","page":"Development","title":"AGNI.energy.calc_hrates!","text":"Calculate heating rates at cell-centres from the total flux.\n\nRequires the total flux to have already been set (atmos.flux_tot). Heating rates are calculated in units of kelvin per day.\n\nArguments:\n\natmos::Atmos_t                  the atmosphere struct instance to be used.\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.energy.condense_diffuse!-Tuple{AGNI.atmosphere.Atmos_t}","page":"Development","title":"AGNI.energy.condense_diffuse!","text":"Analytical diffusion scheme for condensation and evaporation energy.\n\nIntegrates from bottom of model upwards. Based on the amount of phase change at each level, a phase change flux is calculated by assuming a fixed condensation timescale.\n\nUpdates fluxes. Requires chemistry.handle_saturation to be called first in the multi-component case.\n\nArguments:\n\natmos::Atmos_t          the atmosphere struct instance to be used.\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.energy.convection!-Tuple{AGNI.atmosphere.Atmos_t}","page":"Development","title":"AGNI.energy.convection!","text":"Calculate dry convective fluxes using mixing length theory.\n\nUses the mixing length formulation outlined by Joyce & Tayar (2023), which was also implemented in Lee et al. (2024), and partially outlined in an earlier paper by Robinson & Marley (2014).\n\nhttps://arxiv.org/abs/2303.09596 https://doi.org/10.1093/mnras/stae537 https://ui.adsabs.harvard.edu/abs/1962JGR....67.3095B/abstract\n\nConvective energy transport fluxes are calculated at every level edge, just like the radiative fluxes. This is not compatible with moist convection. By using MLT to parameterise convection, we can also calculate Kzz directly.\n\nThe mixing length is set to asymptotically approach H (for z>>H) or z (for z<H) as per Blackadar (1962). Alternatively, it can be set equal to H.\n\nThe scale height is formulated as:     Hp = P / (œÅ g) The adiabatic lapse rate is formulated as:     ‚àá_ad = dln(T)/dln(P) = (P/T)*(dT/dP) = (P/T)*(1/[œÅ c_p]) for an ideal gas, this becomes:     ‚àá_ad = R / (Œº c_p)\n\nArguments:\n\natmos::Atmos_t          the atmosphere struct instance to be used.\npmin::Float64           pressure [bar] below which convection is disabled\nmltype::Int             mixing length value (1: scale height, 2: asymptotic)\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.energy.fill_Kzz!-Tuple{AGNI.atmosphere.Atmos_t}","page":"Development","title":"AGNI.energy.fill_Kzz!","text":"Fill Kzz values for the entire profile.\n\nThis function is called after the convection scheme has been run.\n\nThe Kzz value in the convective region (and below) are set equal to the maximum value in the convective region, as calculated by MLT. The value increases with power-law scaling with pressure in the stratosphere.\n\nArguments:\n\natmos::Atmos_t          the atmosphere struct instance to be used.\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.energy.radtrans!-Tuple{AGNI.atmosphere.Atmos_t, Bool}","page":"Development","title":"AGNI.energy.radtrans!","text":"Calculate radiative fluxes using SOCRATES.\n\nUses the configuration inside the atmos struct. Can either do LW or SW calculation as required. Imports SOCRATES wrapper from the atmosphere module, rather than loading it twice.\n\nArguments:\n\natmos::Atmos_t                  the atmosphere struct instance to be used.\nlw::Bool                        longwave calculation? Else: shortwave\ncalc_cf::Bool=false             also calculate contribution function?\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.energy.reset_fluxes!-Tuple{AGNI.atmosphere.Atmos_t}","page":"Development","title":"AGNI.energy.reset_fluxes!","text":"Reset energy fluxes to zero.\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.energy.restore_composition!-Tuple{AGNI.atmosphere.Atmos_t}","page":"Development","title":"AGNI.energy.restore_composition!","text":"Reset mixing ratios to their original values\n\n\n\n\n\n","category":"method"},{"location":"manual/#Numerical-solver","page":"Development","title":"Numerical solver","text":"","category":"section"},{"location":"manual/","page":"Development","title":"Development","text":"Functions from solver.jl.","category":"page"},{"location":"manual/","page":"Development","title":"Development","text":"Modules = [AGNI.solver]","category":"page"},{"location":"manual/#AGNI.solver.gs_search-Tuple{Function, Float64, Float64, Float64, Float64, Int64}","page":"Development","title":"AGNI.solver.gs_search","text":"Golden section search algorithm\n\nMinimises a function f between the bounds a and b.\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.solver.solve_energy!-Tuple{AGNI.atmosphere.Atmos_t}","page":"Development","title":"AGNI.solver.solve_energy!","text":"Obtain radiative-convective equilibrium using a matrix method.\n\nSolves the non-linear system of equations defined by the flux field divergence, minimising flux loss across a cell by iterating the temperature profile.\n\nArguments:\n\natmos::Atmos_t                  the atmosphere struct instance to be used.\nsol_type::Int                   solution type, 1: tmpsurf | 2: skin | 3: fluxint | 4: tgt_olr\nchem_type::Int                  chemistry type (see wiki)\nconvect::Bool                   include convection\nsens_heat::Bool                 include sensible heating at the surface\nconduct::Bool                   include conductive heat transport within the atmosphere\nlatent::Bool                    include latent heat exchange (condensation/evaporation)\nrainout::Bool                   allow rainout (phase change impacts mixing ratios, not just energy fluxes)\ndx_max::Float64                 maximum step size [K]\nmax_steps::Int                  maximum number of solver steps\nmax_runtime::Float64            maximum runtime in wall-clock seconds\nfdw::Float64                    finite difference: relative width (dx/x) of the \"difference\"\nfdc::Bool                       finite difference: ALWAYS use central difference?\nfdo::Int                        finite difference: scheme order (2nd or 4th)\nmethod::Int                     numerical method (1: Newton-Raphson, 2: Gauss-Newton, 3: Levenberg-Marquardt)\nls_method::Int                  linesearch algorithm (0: None, 1: golden, 2: backtracking)\neasy_start::Bool                improve convergence by introducing convection and phase change gradually\nperturb_all::Bool               always recalculate entire Jacobian matrix? Otherwise updates columns only as required\nls_increase::Bool               factor by which the cost can increase from last step before triggering linesearch\ndetect_plateau::Bool            assist solver when it is stuck in a region of small dF/dT\nmodplot::Int                    iteration frequency at which to make plots\nsave_frames::Bool               save plotting frames\nmodprint::Int                   iteration frequency at which to print info\nplot_jacobian::Bool             plot jacobian too?\nconv_atol::Float64              convergence: absolute tolerance on per-level flux deviation [W m-2]\nconv_rtol::Float64              convergence: relative tolerance on per-level flux deviation [dimensionless]\n\nReturns:     Nothing\n\n\n\n\n\n","category":"method"},{"location":"manual/#Plotting-functions-and-utilities","page":"Development","title":"Plotting functions and utilities","text":"","category":"section"},{"location":"manual/","page":"Development","title":"Development","text":"Functions from plotting.jl.","category":"page"},{"location":"manual/","page":"Development","title":"Development","text":"Modules = [AGNI.plotting]","category":"page"},{"location":"manual/#AGNI.plotting.animate","page":"Development","title":"AGNI.plotting.animate","text":"Animate output frames from solver, using ffmpeg\n\n\n\n\n\n","category":"function"},{"location":"manual/#AGNI.plotting.combined-Tuple{Any, Any, Any, String, String}","page":"Development","title":"AGNI.plotting.combined","text":"Combined plot used for tracking behaviour of the solver\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.plotting.jacobian-Tuple{Matrix{Float64}, String}","page":"Development","title":"AGNI.plotting.jacobian","text":"Plot jacobian matrix\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.plotting.plot_albedo-Tuple{AGNI.atmosphere.Atmos_t, String}","page":"Development","title":"AGNI.plotting.plot_albedo","text":"Plot spectral albedo (ratio of SWUP to SWDN)\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.plotting.plot_cloud-Tuple{AGNI.atmosphere.Atmos_t, String}","page":"Development","title":"AGNI.plotting.plot_cloud","text":"Plot the cloud mass mixing ratio and area fraction.\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.plotting.plot_contfunc1-Tuple{AGNI.atmosphere.Atmos_t, String}","page":"Development","title":"AGNI.plotting.plot_contfunc1","text":"Plot contribution function at different bands.\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.plotting.plot_contfunc2-Tuple{AGNI.atmosphere.Atmos_t, String}","page":"Development","title":"AGNI.plotting.plot_contfunc2","text":"Plot normalised contribution function (per band)\n\nThe data displayed in this plot are fine, but the x-axis ticks are labelled incorrectly by the plotting library. I don't know why this is.\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.plotting.plot_emission-Tuple{AGNI.atmosphere.Atmos_t, String}","page":"Development","title":"AGNI.plotting.plot_emission","text":"Plot emission spectrum at the TOA\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.plotting.plot_fluxes-Tuple{AGNI.atmosphere.Atmos_t, String}","page":"Development","title":"AGNI.plotting.plot_fluxes","text":"Plot the fluxes at each pressure level\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.plotting.plot_pt-Tuple{AGNI.atmosphere.Atmos_t, String}","page":"Development","title":"AGNI.plotting.plot_pt","text":"Plot the temperature-pressure profile.\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.plotting.plot_radius-Tuple{AGNI.atmosphere.Atmos_t, String}","page":"Development","title":"AGNI.plotting.plot_radius","text":"Plot the radius vs pressure profile.\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.plotting.plot_vmr-Tuple{AGNI.atmosphere.Atmos_t, String}","page":"Development","title":"AGNI.plotting.plot_vmr","text":"Plot the VMRs of the atmosphere at each cell-centre location.\n\n\n\n\n\n","category":"method"},{"location":"manual/#File-I/O-modules","page":"Development","title":"File I/O modules","text":"","category":"section"},{"location":"manual/","page":"Development","title":"Development","text":"Functions from save.jl and load.jl.","category":"page"},{"location":"manual/","page":"Development","title":"Development","text":"Modules = [AGNI.save, AGNI.load]","category":"page"},{"location":"manual/#AGNI.save.write_fluxes-Tuple{AGNI.atmosphere.Atmos_t, String}","page":"Development","title":"AGNI.save.write_fluxes","text":"Write cell-edge energy fluxes to a CSV file\n\nArguments\n\natmos::Atmos_t      Atmosphere object\nfname::String       Filename to write to\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.save.write_ncdf-Tuple{AGNI.atmosphere.Atmos_t, String}","page":"Development","title":"AGNI.save.write_ncdf","text":"Write verbose atmosphere data to a NetCDF file\n\nArguments\n\natmos::Atmos_t      Atmosphere object\nfname::String       Filename to write to\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.save.write_profile-Tuple{AGNI.atmosphere.Atmos_t, String}","page":"Development","title":"AGNI.save.write_profile","text":"Write {Pressure, Temperature, Radius} profile to a CSV file\n\nArguments\n\natmos::Atmos_t      Atmosphere object\nfname::String       Filename to write to\n\n\n\n\n\n","category":"method"},{"location":"manual/#AGNI.load.load_ncdf!-Tuple{AGNI.atmosphere.Atmos_t, String}","page":"Development","title":"AGNI.load.load_ncdf!","text":"Load atmosphere data from a NetCDF file.\n\nThis must be called after setup! and allocate! have been called on this atmos struct. Does not overwrite energy fluxes within the atmospherem, or other wavelength-dependent properties. Only composition, temperatures, layer properties, and boundary conditions are updated by this function.\n\nArguments:\n\natmos::Atmos_t      the atmosphere struct instance to be used.\nfname::String       path to the NetCDF file\n\nReturns:\n\nok::Bool            loaded ok?\n\n\n\n\n\n","category":"method"},{"location":"examples/#Example-outputs","page":"Example outputs","title":"Example outputs","text":"","category":"section"},{"location":"examples/#Pure-steam-runaway-greenhouse-effect","page":"Example outputs","title":"Pure steam runaway greenhouse effect","text":"","category":"section"},{"location":"examples/","page":"Example outputs","title":"Example outputs","text":"By assuming the atmosphere temperature profile follows a dry adiabat and the water vapour-condensate coexistance curve defined by the Clausius-Claperyron relation, we see a characteristic relationship between the outgoing longwave radiation (OLR) and the surface temperature (T_s). Initially OLR increases with T_s, but as the condensing layer (which is independent of T_s) overlaps with the photosphere, OLR and T_s decouple. Eventually the atmosphere reaches a dry post-runaway state, and OLR increases rapidly with T_s.","category":"page"},{"location":"examples/","page":"Example outputs","title":"Example outputs","text":"  <img src=\"assets/runaway/curve.png\" width=75% class=\"center\"/>","category":"page"},{"location":"examples/","page":"Example outputs","title":"Example outputs","text":"You can find a Jupyter notebook which reproduces this result in the tutorials directory of the repository.","category":"page"},{"location":"examples/#Prescribed-convective-case","page":"Example outputs","title":"Prescribed convective case","text":"","category":"section"},{"location":"examples/","page":"Example outputs","title":"Example outputs","text":"In this case, a temperature profile is prescribed to follow a dry adiabat from the surface to a moist region, and then a pseudoadiabat to the top of the atmosphere. This is in line with previous works and the OLR curve above.","category":"page"},{"location":"examples/","page":"Example outputs","title":"Example outputs","text":"  <img src=\"assets/nosolve/plot_ptprofile.png\" width=62% class=\"center\"/>","category":"page"},{"location":"examples/","page":"Example outputs","title":"Example outputs","text":"Radiative fluxes are then calculated according to this  temperature profile. Because the profile is prescribed, the fluxes are not balanced locally or globally across the column.","category":"page"},{"location":"examples/","page":"Example outputs","title":"Example outputs","text":"  <img src=\"assets/nosolve/plot_fluxes.png\" width=62% class=\"center\"/>","category":"page"},{"location":"examples/#Radiative-convective-solution","page":"Example outputs","title":"Radiative-convective solution","text":"","category":"section"},{"location":"examples/","page":"Example outputs","title":"Example outputs","text":"Instead, we can model an atmosphere such that that energy is globally and locally conserved. Convection is parameterised using mixing length theory in this case, allowing the system to be solved using a Newton-Raphson method. In the convective region at ~0.1 bar, we can see that the radiative fluxes and convective fluxes entirely cancel, because AGNI was asked to solve for a case with zero total flux transport.","category":"page"},{"location":"examples/","page":"Example outputs","title":"Example outputs","text":"  <img src=\"assets/withsolve/plot_ptprofile.png\" width=62% class=\"center\"/>\n  <br />\n  <img src=\"assets/withsolve/plot_fluxes.png\" width=62% class=\"center\"/>","category":"page"},{"location":"examples/","page":"Example outputs","title":"Example outputs","text":"We can also plot the outgoing emission spectrum and normalised longwave contribution function (CF). The spectrum clearly demonstrates complex water absorption features, and exceeds blackbody emission at shorter wavelengths due to Rayleigh scattering. The CF quantifies how much each pressure level contributes to the outgoing emission spectrum at a given wavelength ‚Äì this is then plotted versus wavelength and pressure.","category":"page"},{"location":"examples/","page":"Example outputs","title":"Example outputs","text":"  <img src=\"assets/withsolve/plot_emission.png\" width=90% class=\"center\"/>","category":"page"},{"location":"","page":"Home","title":"Home","text":"    <img src=\"assets/logo_title.svg\" width=32% class=\"center\"/>\n    <p align=\"center\">\n        <b>A radiative-convective model for lava planet atmospheres</b>\n    </p>","category":"page"},{"location":"","page":"Home","title":"Home","text":"A numerical model for the atmospheres of hot rocky (exo)planets. AGNI's primary purpose is to simulate the evolving atmospheres of magma ocean planets, while ensuring that radiative-convective equilibrium is sufficiently maintained. Pronounced as ag-nee. Named after the fire deity of Hinduism.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Follow Getting started for information on installing the code and obtaining results.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Contact: harrison[dot]nicholls[at]physics.ox.ac.uk","category":"page"},{"location":"","page":"Home","title":"Home","text":"GitHub: https://github.com/nichollsh/AGNI","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you use AGNI, please cite the following papers:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Nicholls et al., (2025a) - DOI 10.1093/mnras/stae2772\nNicholls et al., (2025b) - submitted to JOSS","category":"page"},{"location":"","page":"Home","title":"Home","text":"This software is available under the GPLv3. Copyright (C) 2025 Harrison Nicholls.","category":"page"},{"location":"setup/#Getting-started","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"setup/","page":"Getting started","title":"Getting started","text":"This page outlines requirements and installation steps for the code. Currently, GNU/Linux and MacOS (including ARM) are supported.","category":"page"},{"location":"setup/#Requirements","page":"Getting started","title":"Requirements","text":"","category":"section"},{"location":"setup/","page":"Getting started","title":"Getting started","text":"gfortran\nNetCDF library for FORTRAN\nmake\ncurl","category":"page"},{"location":"setup/","page":"Getting started","title":"Getting started","text":"warning: Warning\nDo not install Julia using your system package manager. Install only from julialang.org","category":"page"},{"location":"setup/#Installation","page":"Getting started","title":"Installation","text":"","category":"section"},{"location":"setup/","page":"Getting started","title":"Getting started","text":"Follow the steps below in order to setup the code.","category":"page"},{"location":"setup/","page":"Getting started","title":"Getting started","text":"Install Julia: curl -fsSL https://install.julialang.org | sh\nDownload AGNI: git clone https://github.com/nichollsh/AGNI.git\nChange directory: cd AGNI\nSetup SOCRATES by doing either ONE of the following...\nFollow the instructions on the SOCRATES GitHub page\nRun bash src/get_socrates.sh\nFinally, install AGNI: bash src/get_agni.sh","category":"page"},{"location":"setup/","page":"Getting started","title":"Getting started","text":"AGNI is now installed as a package into the Julia environment of the AGNI directory. This will also have downloaded some basic input data and run the tests.","category":"page"},{"location":"setup/","page":"Getting started","title":"Getting started","text":"warning: Warning\nThe RAD_DIR environment variable must be set to your SOCRATES path whenever AGNI is being used. This is so that AGNI can locate the SOCRATES libraries.","category":"page"},{"location":"setup/#Testing","page":"Getting started","title":"Testing","text":"","category":"section"},{"location":"setup/","page":"Getting started","title":"Getting started","text":"If you want to run the tests manually, simply use the script in the test/ folder...","category":"page"},{"location":"setup/","page":"Getting started","title":"Getting started","text":"julia test/runtests.jl","category":"page"},{"location":"setup/","page":"Getting started","title":"Getting started","text":"This will print information on whether tests passed or failed.","category":"page"},{"location":"setup/#Updating","page":"Getting started","title":"Updating","text":"","category":"section"},{"location":"setup/","page":"Getting started","title":"Getting started","text":"It's important that you keep AGNI up to date, especially if you are using as part of the PROTEUS framework. Use this script to automatically pull changes from GitHub and download any required data files.","category":"page"},{"location":"setup/","page":"Getting started","title":"Getting started","text":"bash src/get_agni.sh","category":"page"},{"location":"setup/#Using-the-code","page":"Getting started","title":"Using the code","text":"","category":"section"},{"location":"setup/","page":"Getting started","title":"Getting started","text":"See Running the model for information on using the code. See Troubleshooting for troubleshooting advice.","category":"page"},{"location":"setup/#Coupling-with-FastChem","page":"Getting started","title":"Coupling with FastChem","text":"","category":"section"},{"location":"setup/","page":"Getting started","title":"Getting started","text":"This can be enabled using the configuration file parameter composition.chem_type. Of course, it is first necessary to set up FastChem, which can be done by running:","category":"page"},{"location":"setup/","page":"Getting started","title":"Getting started","text":"bash src/get_fastchem.sh","category":"page"},{"location":"setup/","page":"Getting started","title":"Getting started","text":"You must then set the FC_DIR environment variable to the location of the FastChem installation folder. Ideally you should also add this variable to your bashrc file.","category":"page"},{"location":"setup/","page":"Getting started","title":"Getting started","text":"There is information ","category":"page"}]
}
