import os
import numpy as np
import shutil
import glob

AEOLUS_DIR = os.getenv('AEOLUS_DIR')

###################################
########## BASE SETTINGS ##########
###################################

# Define data and code directories
dir_socrates    = AEOLUS_DIR + "/rad_trans/socrates_code/"
dat_home        = "/network/group/aopp/planetary/RTP035_NICHOLLS_PROTEUS/linelists/"
dir_continua    = dat_home+"dat_continua/"
dir_hitran      = dat_home+"dat_hitran/"
dir_hitemp      = dat_home+"dat_hitemp/"

# Specify absorbers that are included
volatile_list = [ 
                    "H2O", 
                    #"CO2", 
                    #"O3", 
                    #"N2O", 
                    #"CO", 
                    #"CH4", 
                    #"O2", 
                    #"NO", 
                    #"SO2", 
                    #"NO2", 
                    #"NH3", 
                    #"HNO3", 
                    #"N2", 
                    #"H2", 
                    #"He", 
                    #"OCS", 
                ]

# Specify database: HITEMP or HITRAN
database        = "HITRAN"

# Available modes: 1: production; 2: testing
run_mode        =  1
 
# Number of CPU cores
nprocs          = 60

# Restart flag. 0: Start always from scratch, 1: Restart from previous state.
restart         = 0

# Write stellar spectrum in spectral file, 0: no, 1: yes
write_spectrum  = 0

####################################
######### / BASE SETTINGS ##########
####################################

# Generate temp directory for restart
if not os.path.exists('temp'):
    os.makedirs('temp')

# Find and mark number of restarts
if restart == 0:
    rs_no = "0"
elif restart == 1:
    rs_no = str(len(glob.glob("temp/"+"done_*")))

print("######################### SETTINGS #########################")
print("Volatile list:", volatile_list)
print("Database:", database)
print("Run mode:", run_mode)
print("CPUs:", nprocs)
print("SOCRATES dir:", dir_socrates)
print("Line list dir:", dat_home)
print("Restart flag:", restart)
print("Written blocks:", rs_no)
print("Write spectrum:", write_spectrum)

# Convert to string
nprocs          = str(nprocs)   

### Band settings

# HITEMP-compatible (H2O) LbL block spacing: 318 bands
bands = np.concatenate((np.arange(0,3000,25),np.arange(3000,11000,50),np.arange(11000,30500,500))) 

# Set first band edge to non-zero, otherwise error
bands[0] = 1.0 

# Number of bands
band_no = str(int(np.size(bands)-1))
print("Number of bands:", band_no)

# P-T grids for LbL and CIA data
pt_lbl = "pt_grid_lbl.dat"
pt_cia = "pt_grid_cia.dat"

# File name of SOCRATES spectral file to be generated
file_name = "sp_b"+band_no+"_"+database+"_a"+str(len(volatile_list))

# File name of bash execution script to be written
exec_file_name = "sp_exec_"+file_name+".sh"

# Starting from scratch
if restart == 0 or rs_no == "0":
    # Remove auxiliary files generated by previous runs
    os.system('rm -rf sp_exec_*')
    os.system('rm -rf sp_b*')
    os.system('rm -rf pt_*')
    os.system('rm -rf radiation_code.lock')
    os.system('rm -rf temp/*')
# Copy old files to /temp for checks
else:
    exec_file_name_new = "sp_exec_"+file_name+"_"+rs_no+".sh"
    shutil.copy2(exec_file_name, "temp/"+exec_file_name_new)
    file_name_prev = file_name+"_"+rs_no
    shutil.copy2("temp/"+file_name_prev, file_name)
    shutil.copy2("temp/"+file_name_prev+'_k', file_name+'_k')
    # shutil.copy2(file_name+'-e', "temp/"+file_name_new+'-e')

# Remove auxiliary species files
os.system('rm -rf *_lbl_*')
os.system('rm -rf *_lbl.nc')
os.system('rm -rf *_m')
os.system('rm -rf *_o')
os.system('rm -rf *_o.nc')
os.system('rm -rf *_l')
os.system('rm -rf *h2o_*')
os.system('rm -rf *co2_*')
os.system('rm -rf *o3_*')
os.system('rm -rf *n2o_*')
os.system('rm -rf *co_*')
os.system('rm -rf *ch4_*')
os.system('rm -rf *o2_*')
os.system('rm -rf *no_*')
os.system('rm -rf *so2_*')
os.system('rm -rf *no2_*')
os.system('rm -rf *nh3_*')
os.system('rm -rf *hno3_*')
os.system('rm -rf *n2_*')
os.system('rm -rf *h2_*')
os.system('rm -rf *he_*')
os.system('rm -rf *ocs_*')

# Change settings depending on run_mode
if run_mode == 1: # PRODUCTION

    # Temperature and pressure grids for correlated-k
    T_grid = "100. 200. 300. 400. 500. 600. 700. 800. 900. 1000. 1200. 1400. 1600. 1800. 2000. 2250. 2500. 2750. 3000. 3500. 4000."
    P_grid_low  = np.logspace(-6, -2, num=5, endpoint=False)
    P_grid_high = np.logspace(-2, 9, num=45, endpoint=True)
    P_grid      = np.concatenate((P_grid_low, P_grid_high), axis=0)
    
    # Frequency increment for integration in m-1
    i_int  = "0.1"

elif run_mode == 2:  # TESTING

    # Temperature and pressure grids for correlated-k
    T_grid = "100. 4000."
    P_grid = [ 1.00e5 ]

    # Frequency increment for integration in m-1
    i_int  = "1.0"

print("T grid (K):\n", T_grid, "\nP grid (Pa):\n", P_grid)

# # Create current restart flag file
# open("temp/"+rs_no+'.rs', 'a').close()

# Starting from scratch
if restart == 0 or rs_no == "0":

    # Generate P-T files to be read by Ccorr script
    pt_lbl_file = open(pt_lbl, "w+")
    pt_lbl_file.write('*PTVAL' + '\n')
    for prs in P_grid:
        pt_lbl_file.write(str(np.format_float_scientific(np.float32(prs))) + ' ' + T_grid + '\n')
    pt_lbl_file.write('*END' + '\n')
    pt_lbl_file.close()
    pt_cia_file = open(pt_cia, "w+")
    pt_cia_file.write('*PTVAL' + '\n')
    pt_cia_file.write(T_grid + '\n')
    pt_cia_file.write('*END' + '\n')
    pt_cia_file.close()

# Find band indices of band edges compatible with HITEMP data wavenumber spacing
co2_hitemp_band_edges = [ 0, 500, 625, 750, 1000, 1500, 2000, 2125, 2250, 2500, 3000, 3250, 3500, 3750, 4000, 4500, 5000, 5500, 6000, 6500, 12785 ]
h2o_hitemp_band_edges = [ 0, 50, 150, 250, 350, 500, 600, 700, 800, 900, 1000, 1150, 1300, 1500, 1750, 2000, 2250, 2500, 2750, 3000, 3250, 3500, 4150, 4500, 5000, 5500, 6000, 6500, 7000, 7500, 8000, 8500, 9000, 11000, 30000 ]

# Corresponding band edges
# First band needs to be = 0 because of loop definition (see in HITEMP loop) 
co2_band_indices = [0] 
h2o_band_indices = [0]

# Loop over band edges and compare to HITEMP edges
for idx, nu in enumerate(bands):
    if nu in co2_hitemp_band_edges:
        co2_band_indices.append(idx)
    if nu in h2o_hitemp_band_edges:
        h2o_band_indices.append(idx)

# Add last band edge
co2_band_indices.append(np.size(bands)-1) # 12785 not in band edges
# h2o_band_indices.append(np.size(bands)-1) # 30000 already included

print("CO2 HITEMP band edges:", co2_hitemp_band_edges)
print("CO2 HITEMP-compatible band numbers:", co2_band_indices)
print("H2O HITEMP band edges:", h2o_hitemp_band_edges)
print("H2O HITEMP-compatible band numbers:", h2o_band_indices)

# Open file to produce bash script
f = open(exec_file_name, "w+")

# Starting from scratch
if restart == 0 or rs_no == "0":

    # Write skeleton spectral file using prep_spec utility
    f.write('prep_spec <<EOF'+ '\n')
    f.write(file_name + '\n')

    # Set number of bands
    f.write(band_no + '\n')

    # Set total number of absorbers 
    # (both LbL- and CIA-only ones, count all uncommented, individual molecules below)
    f.write(str(len(volatile_list))  + '\n')
    print(" Number of volatiles:", len(volatile_list))
    # Set absorber ids (see list in SOCRATES userguide p. 71 for numbering)
    # (absorber list needs to match the absorber number directly above)
    if "H2O" in volatile_list:
        f.write('1'  + '\n')  # H2O
    if "CO2" in volatile_list:
        f.write('2'  + '\n')  # CO2
    if "O3" in volatile_list:
        f.write('3'  + '\n')  # O3
    if "N2O" in volatile_list:
        f.write('4'  + '\n')  # N2O
    if "CO" in volatile_list:
        f.write('5'  + '\n')  # CO
    if "CH4" in volatile_list:
        f.write('6'  + '\n')  # CH4
    if "O2" in volatile_list:
        f.write('7'  + '\n')  # O2
    if "NO" in volatile_list:
        f.write('8'  + '\n')  # NO
    if "SO2" in volatile_list:
        f.write('9'  + '\n')  # SO2
    if "NO2" in volatile_list:
        f.write('10' + '\n')  # NO2
    if "NH3" in volatile_list:
        f.write('11' + '\n')  # NH3
    if "HNO3" in volatile_list:
        f.write('12' + '\n')  # HNO3
    if "N2" in volatile_list:
        f.write('13' + '\n')  # N2
    if "H2" in volatile_list:
        f.write('23' + '\n')  # H2
    if "He" in volatile_list:
        f.write('24' + '\n')  # He
    if "OCS" in volatile_list:
        f.write('25' + '\n')  # OCS

    # Count total number of "continua"
    # (count number of participating CIA pairs [self+foreign])
    counter_continua = 0
    if "H2O" in volatile_list:
        counter_continua += 1
    if "CO2" in volatile_list:
        counter_continua += 1
    if "CH4" in volatile_list:
        counter_continua += 1
    if "O2" in volatile_list:
        counter_continua += 1
    if "N2" in volatile_list:
        counter_continua += 1
    if "H2" in volatile_list:
        counter_continua += 1
    if ("CO2" in volatile_list) and ("CH4" in volatile_list):
        counter_continua += 1
    if ("CO2" in volatile_list) and ("H2" in volatile_list):
        counter_continua += 1
    if ("CO2" in volatile_list) and ("He" in volatile_list):
        counter_continua += 1
    if ("CH4" in volatile_list) and ("He" in volatile_list):
        counter_continua += 1
    if ("O2" in volatile_list) and ("CO2" in volatile_list):
        counter_continua += 1
    if ("O2" in volatile_list) and ("N2" in volatile_list):
        counter_continua += 1
    if ("N2" in volatile_list) and ("H2O" in volatile_list):
        counter_continua += 1
    if ("N2" in volatile_list) and ("CH4" in volatile_list):
        counter_continua += 1
    if ("N2" in volatile_list) and ("H2" in volatile_list):
        counter_continua += 1
    if ("N2" in volatile_list) and ("He" in volatile_list):
        counter_continua += 1
    if ("H2" in volatile_list) and ("CH4" in volatile_list):
        counter_continua += 1
    if ("H2" in volatile_list) and ("He" in volatile_list):
        counter_continua += 1
    f.write(str(counter_continua) + '\n')
    print(" Number of continua:", counter_continua)

    ### Set CIA pairs
    ##   Self:
    # H2O-H2O
    if "H2O" in volatile_list:
        f.write('1'  + '\n')  # H2O-
        f.write('1'  + '\n')  # -H2O
    # CO2-CO2
    if "CO2" in volatile_list:
        f.write('2'  + '\n')  # CO2-
        f.write('2'  + '\n')  # -CO2
    # CH4-CH4
    if "CH4" in volatile_list:
        f.write('6'  + '\n')  # CH4-
        f.write('6'  + '\n')  # -CH4
    # O2-O2
    if "O2" in volatile_list:
        f.write('7'  + '\n')  # O2-
        f.write('7'  + '\n')  # -O2
    # N2-N2
    if "N2" in volatile_list:
        f.write('13' + '\n')  # N2-
        f.write('13' + '\n')  # -N2
    # H2-H2
    if "H2" in volatile_list:
        f.write('23' + '\n')  # H2-
        f.write('23' + '\n')  # -H2

    ##   Foreign:
    # CO2-CH4
    if ("CO2" in volatile_list) and ("CH4" in volatile_list):
        f.write('2'  + '\n')  # CO2-
        f.write('6'  + '\n')  # -CH4
    # CO2-H2
    if ("CO2" in volatile_list) and ("H2" in volatile_list):
        f.write('2'  + '\n')  # CO2-
        f.write('23' + '\n')  # -H2
    # CO2-He
    if ("CO2" in volatile_list) and ("He" in volatile_list):
        f.write('2'  + '\n')  # CO2-
        f.write('24' + '\n')  # -He
    # CH4-He
    if ("CH4" in volatile_list) and ("He" in volatile_list):
        f.write('6'  + '\n')  # CH4-
        f.write('24' + '\n')  # -He
    # O2-CO2
    if ("O2" in volatile_list) and ("CO2" in volatile_list):
        f.write('7'  + '\n')  # O2-
        f.write('2'  + '\n')  # -CO2
    # O2-N2
    if ("O2" in volatile_list) and ("N2" in volatile_list):
        f.write('7'  + '\n')  # O2-
        f.write('13' + '\n')  # -N2
    # N2-H2O
    if ("N2" in volatile_list) and ("H2O" in volatile_list):
        f.write('13' + '\n')  # N2-
        f.write('1'  + '\n')  # -H2O
    # N2-CH4
    if ("N2" in volatile_list) and ("CH4" in volatile_list):
        f.write('13' + '\n')  # N2-
        f.write('6'  + '\n')  # -CH4
    # N2-H2
    if ("N2" in volatile_list) and ("H2" in volatile_list):
        f.write('13' + '\n')  # N2-
        f.write('23' + '\n')  # -H2
    # N2-He
    if ("N2" in volatile_list) and ("He" in volatile_list):
        f.write('13' + '\n')  # N2-
        f.write('24' + '\n')  # -He
    # H2-CH4
    if ("H2" in volatile_list) and ("CH4" in volatile_list):
        f.write('23' + '\n')  # H2-
        f.write('6'  + '\n')  # -CH4
    # H2-He
    if ("H2" in volatile_list) and ("He" in volatile_list):
        f.write('23' + '\n')  # H2-
        f.write('24' + '\n')  # -He

    # Set number of aerosols
    f.write('0'+ '\n')

    # Set band units (c for inverse cm)
    f.write('c'+ '\n')

    # Write band edges one by one
    f.write(str(bands[0])+'\n')
    for band in bands[1:-1]:
    	f.write(str(band)+'\n')
    	f.write(str(band)+'\n')
    f.write(str(bands[-1])+'\n')

    # Set absorbers in each band: line *absorbers IDs*
    # Set to '0' when using MT_CKD or HITEMP data!
    for band in bands[:-1]:
    	f.write('0'+ '\n') # 1 2 5 6 7 13 23

    # Set continua in each band: CIA *indexing IDs*
    # Set to '0' when using MT_CKD or HITEMP data!
    for band in bands[:-1]:
    	f.write('0'+ '\n') # 1 2 3 ... 

    # Exclude no bands
    f.write('n'+ '\n')

    # Close prep_spec
    f.write('-1'+ '\n')
    f.write('EOF'+ '\n')

print("######################## / SETTINGS ########################")

#####################

# Write correlated-k coefficients using Ccorr_k utility, with suffixes:
# -F File with grid of pressure-temperature values
# -R Range of bands for the calculation (default to all)
# -c Cutoff in inverse cm for each band
# -i Frequency increment for integration in m-1
# -l Maximum absorption path in kg/m2
# -t Tolerance, i.e. maximum RMS error in correlated-k assumption
# -k Adjust for use with CKD continuum (optional)
# -s Spectral file
# +p Planckian weighting
# -lk Use lookup table for pressure/temperature scaling
# -o, -m, -L Output files
# -np Number of processors

###################################
########## Line data ##############
###################################

##### H2O lines #####
if "H2O" in volatile_list:

    if database == "HITEMP" and os.path.exists('temp/done_h2o_lbl') == False:

        f.write("echo '###############   H2O lines – HITEMP   ###############'"+"\n")
        for idx, band in enumerate(h2o_band_indices):

            if idx != 0:
                band_first              = str(h2o_band_indices[idx-1]+1)
                band_last               = str(band)
                hitemp_band_edge_left   = str(h2o_hitemp_band_edges[idx-1])
                hitemp_band_edge_right  = str(h2o_hitemp_band_edges[idx])
                band_no_interval        = str(int(band_last)-int(band_first))

                f.write("echo Delete:" + "\n")
                f.write("echo ls *h2o_*" + "\n")
                f.write("rm -rf *h2o_*" + "\n")

                # To check validity
                print("#### H2O bands", band_first+"-"+band_last, "| HITEMP edges:", hitemp_band_edge_left+"-"+hitemp_band_edge_right)
                f.write("echo '####' H2O bands "+band_first+"-"+band_last+" '|' HITEMP edges: "+hitemp_band_edge_left+"-"+hitemp_band_edge_right+"\n")

                f.write('Ccorr_k -F '+pt_lbl+' -D '+dir_hitemp+'01_'+hitemp_band_edge_left+'-'+hitemp_band_edge_right+'_HITEMP2010.par -R '+band_first+' '+band_last+' -c 3000.0 -i '+i_int+' -l 1 1.0e1 -b 1.5e-3 -s '+file_name+' +p -lk -k -o h2o_l'+band_no+'_l -m h2o_l'+band_no+'_lm -L h2o_lbl_lwf_'+pt_lbl+'.nc -sm h2o_l'+band_no+'_'+band_first+'-'+band_last+'map.nc'+ '\n')
                f.write('prep_spec <<EOF'+ '\n')
                f.write(file_name+ '\n')
                f.write('a'+ '\n')
                f.write('5'+ '\n')
                f.write('y'+ '\n')
                f.write('h2o_l'+band_no+'_l'+ '\n')
                f.write('-1'+ '\n')
                f.write('EOF'+ '\n')
                f.write("sed -i -e 's/\*\*\*\*\*/0/g' "+file_name+'\n')
                f.write("sed -i -e 's/\*\*\*//g' "+file_name+'\n')
                f.write("sed -i -e 's/            NaN/0.000000000E+00/g' "+file_name+'\n')

                # H2O-H2O MT_CKD
                f.write("echo '##########' H2O-H2O MT_CKD "+band_first+"-"+band_last+" '|' HITEMP edges: "+hitemp_band_edge_left+"-"+hitemp_band_edge_right+"\n")
                f.write('Ccorr_k -F '+pt_cia+' -R '+band_first+' '+band_last+' -c 2500.0 -i '+i_int+' -ct 1 1 10.0 -t 1.0e-3 -e '+dir_continua+'mt_ckd_v3.0_s296 '+dir_continua+'mt_ckd_v3.0_s260 -k -s '+file_name+' +p -lk -o h2o-h2o_l'+band_no+'_'+band_first+'-'+band_last+'c -m h2o-h2o_l'+band_no+'_'+band_first+'-'+band_last+'cm -L h2o-h2o_lbl_lw.nc -lw h2o_l'+band_no+'_'+band_first+'-'+band_last+'map.nc'+ '\n')
                # Add to spec file with prep_spec
                f.write('prep_spec <<EOF'+ '\n')
                f.write(file_name + '\n')
                f.write('a'+ '\n')
                # Select block 19 (CIA data)
                f.write('19'+ '\n')
                f.write('y'+ '\n')
                f.write('h2o-h2o_l'+band_no+'_'+band_first+'-'+band_last+'c'+ '\n')
                f.write('-1'+ '\n')
                f.write('EOF'+ '\n')
                # Remove faulty characters
                f.write("sed -i -e 's/\*\*\*\*\*/0/g' "+file_name+'\n')
                f.write("sed -i -e 's/\*\*\*//g' "+file_name+'\n')
                f.write("sed -i -e 's/            NaN/0.000000000E+00/g' "+file_name+'\n')

        # Create file to mark as done
        f.write("touch " + "temp/done_h2o_lbl" + '\n')
        f.write("touch " + "temp/done_h2o_mtckd" + '\n')
        # Save copy in temp/
        rs_no = str(int(rs_no)+2)
        f.write("cp -rf "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
        f.write("cp -rf "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")
        # shutil.copy2(file_name, "temp/"+file_name+"_"+rs_no)
        # shutil.copy2(file_name+'_k', "temp/"+file_name+"_"+rs_no+'_k')

    elif database == "HITRAN" and os.path.exists('temp/done_h2o_lbl') == False:

        f.write("echo '###############   H2O lines - HITRAN  ###############'"+"\n")
        f.write('Ccorr_k -F '+pt_lbl+' -D '+dir_hitran+'h2o_data.par -R 1 '+band_no+' -c 3000.0 -i '+i_int+' -l 1 1.0e1 -b 1.5e-3 -s '+file_name+' +p -lk -k -o h2o_l'+band_no+'_l -m h2o_l'+band_no+'_lm -L h2o_lbl_lwf_pt48.nc -sm h2o_l'+band_no+'_1-'+band_no+'map.nc -np '+nprocs+'\n')
        # Add to spec file
        f.write('prep_spec <<EOF'+ '\n')
        # Select spectral file
        f.write(file_name + '\n')
        # Append
        f.write('a'+ '\n')
        # Select block 5 (absorption data)
        f.write('5'+ '\n')
        # Agree to overwrite
        f.write('y'+ '\n')
        # Select data
        f.write('h2o_l'+band_no+'_l'+ '\n')
        f.write('-1'+ '\n')
        f.write('EOF'+ '\n')

        # Create file to mark as done
        f.write("touch " + "temp/done_h2o_lbl" + '\n')
        # Save copy in temp/
        rs_no = str(int(rs_no)+1)
        f.write("cp -rf "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
        f.write("cp -rf "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

##### CO2 lines #####
if "CO2" in volatile_list and os.path.exists('temp/done_co2_lbl') == False:

    if database == "HITEMP":

        f.write("echo '###############   CO2 lines – HITEMP   ###############'"+"\n")
        for idx, band in enumerate(co2_band_indices):

            if idx != 0:
                band_first = str(co2_band_indices[idx-1]+1)
                band_last  = str(band)
                hitemp_band_edge_left  = str(co2_hitemp_band_edges[idx-1])
                hitemp_band_edge_right = str(co2_hitemp_band_edges[idx])

                # To check validity
                print("########## CO2 bands", band_first+"-"+band_last, "| HITEMP edges:", hitemp_band_edge_left+"-"+hitemp_band_edge_right)
                f.write("echo '##########' CO2 bands "+band_first+"-"+band_last+" '|' HITEMP edges: "+hitemp_band_edge_left+"-"+hitemp_band_edge_right+"\n")

                f.write("echo Delete:" + "\n")
                f.write("echo ls *co2_*" + "\n")
                f.write("rm -rf *co2_*" + "\n")
               
                f.write('Ccorr_k -F '+pt_lbl+' -D '+dir_hitemp+'02_'+hitemp_band_edge_left+'-'+hitemp_band_edge_right+'_HITEMP2010.par -R '+band_first+' '+band_last+' -c 3000.0 -i '+i_int+' -l 2 1.0e1 -b 1.5e-3 -s '+file_name+' +p -lk -k -o co2_l'+band_no+'_l -m co2_l'+band_no+'_lm -L co2_lbl_lwf_'+pt_lbl+'.nc -sm co2_l'+band_no+'_'+band_first+'-'+band_last+'map.nc'+ '\n')
                f.write('prep_spec <<EOF'+ '\n')
                f.write(file_name+ '\n')
                f.write('a'+ '\n')
                f.write('5'+ '\n')
                f.write('y'+ '\n')
                f.write('co2_l'+band_no+'_l'+ '\n')
                f.write('-1'+ '\n')
                f.write('EOF'+ '\n')
                f.write("sed -i -e 's/\*\*\*\*\*/0/g' "+file_name+'\n')
                f.write("sed -i -e 's/\*\*\*//g' "+file_name+'\n')
                f.write("sed -i -e 's/            NaN/0.000000000E+00/g' "+file_name+'\n')

    elif database == "HITRAN":

        f.write("echo '###############   CO2 lines – HITRAN  ###############'"+"\n")
        f.write('Ccorr_k -F '+pt_lbl+' -D '+dir_hitran+'co2_data.par -R 1 '+band_no+' -c 3000.0 -i '+i_int+' -l 2 1.0e1 -t 1.0e-2 -k -s '+file_name+' +p -lk -o co2_o -m co2_m -L co2_lbl.nc -np '+nprocs+'\n')
        f.write('prep_spec <<EOF'+ '\n')
        f.write(file_name+ '\n')
        f.write('a'+ '\n')
        f.write('5'+ '\n')
        f.write('y'+ '\n')
        f.write('co2_o'+ '\n')
        f.write('-1'+ '\n')
        f.write('EOF'+ '\n')

    # Create file to mark as done
    f.write("touch " + "temp/done_co2_lbl" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

##### O3 lines #####
if "O3" in volatile_list and os.path.exists('temp/done_o3_lbl') == False:

    f.write("echo '###############   O3 lines – HITRAN    ###############'"+"\n")
    f.write('Ccorr_k -F '+pt_lbl+' -D '+dir_hitran+'o3_hitran.par -R 1 '+band_no+' -c 3000.0 -i '+i_int+' -l 3 1.0e1 -t 1.0e-2 -k -s '+file_name+' +p -lk -o o3_o -m o3_m -L o3_lbl.nc -np '+nprocs+'\n')
    f.write('prep_spec <<EOF'+ '\n')
    f.write(file_name+ '\n')
    f.write('a'+ '\n')
    f.write('5'+ '\n')
    f.write('y'+ '\n')
    f.write('o3_o'+ '\n')
    f.write('-1'+ '\n')
    f.write('EOF'+ '\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_o3_lbl" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

##### N2O lines #####
if "N2O" in volatile_list and os.path.exists('temp/done_n2o_lbl') == False:

    if database == "HITEMP":

        f.write("echo '###############   N2O lines – HITEMP   ###############'"+"\n")
        f.write('Ccorr_k -F '+pt_lbl+' -D '+dir_hitemp+'04_HITEMP2019.par -R 1 '+band_no+' -c 3000.0 -i '+i_int+' -l 4 1.0e1 -t 1.0e-2 -k -s '+file_name+' +p -lk -o n2o_o -m n2o_m -L n2o_lbl.nc -np '+nprocs+'\n')
        f.write('prep_spec <<EOF'+ '\n')
        f.write(file_name+ '\n')
        f.write('a'+ '\n')
        f.write('5'+ '\n')
        f.write('y'+ '\n')
        f.write('n2o_o'+ '\n')
        f.write('-1'+ '\n')
        f.write('EOF'+ '\n')

    elif database == "HITRAN":

        f.write("echo '###############   N2O lines – HITRAN  ###############'"+"\n")
        f.write('Ccorr_k -F '+pt_lbl+' -D '+dir_hitran+'n2o_hitran.par -R 1 '+band_no+' -c 3000.0 -i '+i_int+' -l 4 1.0e1 -t 1.0e-2 -k -s '+file_name+' +p -lk -o n2o_o -m n2o_m -L n2o_lbl.nc -np '+nprocs+'\n')
        f.write('prep_spec <<EOF'+ '\n')
        f.write(file_name+ '\n')
        f.write('a'+ '\n')
        f.write('5'+ '\n')
        f.write('y'+ '\n')
        f.write('n2o_o'+ '\n')
        f.write('-1'+ '\n')
        f.write('EOF'+ '\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_n2o_lbl" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

##### CO lines #####
if "CO" in volatile_list and os.path.exists('temp/done_co_lbl') == False:

    if database == "HITEMP":

        # CO lines
        f.write("echo '###############   CO lines – HITEMP   ###############'"+"\n")
        f.write('Ccorr_k -F '+pt_lbl+' -D '+dir_hitemp+'05_HITEMP2019.par -R 1 '+band_no+' -c 3000.0 -i '+i_int+' -l 5 1.0e1 -t 1.0e-2 -k -s '+file_name+' +p -lk -o co_o -m co_m -L co_lbl.nc -np '+nprocs+'\n')
        f.write('prep_spec <<EOF'+ '\n')
        f.write(file_name+ '\n')
        f.write('a'+ '\n')
        f.write('5'+ '\n')
        f.write('y'+ '\n')
        f.write('co_o'+ '\n')
        f.write('-1'+ '\n')
        f.write('EOF'+ '\n')

    elif database == "HITRAN":

        f.write("echo '###############   CO lines – HITRAN    ###############'"+"\n")
        f.write('Ccorr_k -F '+pt_lbl+' -D '+dir_hitran+'co_hitran.par -R 1 '+band_no+' -c 3000.0 -i '+i_int+' -l 5 1.0e1 -t 1.0e-2 -k -s '+file_name+' +p -lk -o co_o -m co_m -L co_lbl.nc -np '+nprocs+'\n')
        f.write('prep_spec <<EOF'+ '\n')
        f.write(file_name+ '\n')
        f.write('a'+ '\n')
        f.write('5'+ '\n')
        f.write('y'+ '\n')
        f.write('co_o'+ '\n')
        f.write('-1'+ '\n')
        f.write('EOF'+ '\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_co_lbl" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

##### CH4 lines #####
if "CH4" in volatile_list and os.path.exists('temp/done_ch4_lbl') == False:

    if database == "HITEMP":

        # CH4 lines
        f.write("echo '###############   CH4 lines – HITEMP   ###############'"+"\n")
        f.write('Ccorr_k -F '+pt_lbl+' -D '+dir_hitemp+'06_HITEMP2020.par -R 1 '+band_no+' -c 3000.0 -i '+i_int+' -l 6 1.0e1 -t 1.0e-2 -k -s '+file_name+' +p -lk -o ch4_o -m ch4_m -L ch4_lbl.nc -np '+nprocs+'\n')
        f.write('prep_spec <<EOF'+ '\n')
        f.write(file_name+ '\n')
        f.write('a'+ '\n')
        f.write('5'+ '\n')
        f.write('y'+ '\n')
        f.write('ch4_o'+ '\n')
        f.write('-1'+ '\n')
        f.write('EOF'+ '\n')

    elif database == "HITRAN":

        f.write("echo '###############   CH4 lines – HITRAN   ###############'"+"\n")
        f.write('Ccorr_k -F '+pt_lbl+' -D '+dir_hitran+'ch4_hitran.par -R 1 '+band_no+' -c 3000.0 -i '+i_int+' -l 6 1.0e1 -t 1.0e-2 -k -s '+file_name+' +p -lk -o ch4_o -m ch4_m -L ch4_lbl.nc -np '+nprocs+'\n')
        f.write('prep_spec <<EOF'+ '\n')
        f.write(file_name+ '\n')
        f.write('a'+ '\n')
        f.write('5'+ '\n')
        f.write('y'+ '\n')
        f.write('ch4_o'+ '\n')
        f.write('-1'+ '\n')
        f.write('EOF'+ '\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_ch4_lbl" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

##### O2 lines #####
if "O2" in volatile_list and os.path.exists('temp/done_o2_lbl') == False:

    # O2 lines
    f.write("echo '###############   O2 lines – HITRAN    ###############'"+"\n")
    f.write('Ccorr_k -F '+pt_lbl+' -D '+dir_hitran+'o2_hitran.par -R 1 '+band_no+' -c 3000.0 -i '+i_int+' -l 7 1.0e1 -t 1.0e-2 -k -s '+file_name+' +p -lk -o o2_o -m o2_m -L o2_lbl.nc -np '+nprocs+'\n')
    f.write('prep_spec <<EOF'+ '\n')
    f.write(file_name+ '\n')
    f.write('a'+ '\n')
    f.write('5'+ '\n')
    f.write('y'+ '\n')
    f.write('o2_o'+ '\n')
    f.write('-1'+ '\n')
    f.write('EOF'+ '\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_o2_lbl" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

##### NO lines #####
if "NO" in volatile_list and os.path.exists('temp/done_no_lbl') == False:

    if database == "HITEMP":

        # NO lines
        f.write("echo '###############   NO lines – HITEMP   ###############'"+"\n")
        f.write('Ccorr_k -F '+pt_lbl+' -D '+dir_hitemp+'08_HITEMP2019.par -R 1 '+band_no+' -c 3000.0 -i '+i_int+' -l 8 1.0e1 -t 1.0e-2 -k -s '+file_name+' +p -lk -o no_o -m no_m -L no_lbl.nc -np '+nprocs+'\n')
        f.write('prep_spec <<EOF'+ '\n')
        f.write(file_name+ '\n')
        f.write('a'+ '\n')
        f.write('5'+ '\n')
        f.write('y'+ '\n')
        f.write('no_o'+ '\n')
        f.write('-1'+ '\n')
        f.write('EOF'+ '\n')

    elif database == "HITRAN":

        f.write("echo '###############   NO lines – HITRAN   ###############'"+"\n")
        f.write('Ccorr_k -F '+pt_lbl+' -D '+dir_hitran+'no_hitran.par -R 1 '+band_no+' -c 3000.0 -i '+i_int+' -l 8 1.0e1 -t 1.0e-2 -k -s '+file_name+' +p -lk -o no_o -m no_m -L no_lbl.nc -np '+nprocs+'\n')
        f.write('prep_spec <<EOF'+ '\n')
        f.write(file_name+ '\n')
        f.write('a'+ '\n')
        f.write('5'+ '\n')
        f.write('y'+ '\n')
        f.write('no_o'+ '\n')
        f.write('-1'+ '\n')
        f.write('EOF'+ '\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_no_lbl" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

##### SO2 #####
if "SO2" in volatile_list and os.path.exists('temp/done_so2_lbl') == False:

    # SO2 lines
    f.write("echo '###############   SO2 lines – HITRAN    ###############'"+"\n")
    f.write('Ccorr_k -F '+pt_lbl+' -D '+dir_hitran+'so2_hitran.par -R 1 '+band_no+' -c 3000.0 -i '+i_int+' -l 9 1.0e1 -t 1.0e-2 -k -s '+file_name+' +p -lk -o so2_o -m so2_m -L so2_lbl.nc -np '+nprocs+'\n')
    f.write('prep_spec <<EOF'+ '\n')
    f.write(file_name+ '\n')
    f.write('a'+ '\n')
    f.write('5'+ '\n')
    f.write('y'+ '\n')
    f.write('so2_o'+ '\n')
    f.write('-1'+ '\n')
    f.write('EOF'+ '\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_so2_lbl" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

##### NO2 lines #####
if "NO2" in volatile_list and os.path.exists('temp/done_no2_lbl') == False:

    if database == "HITEMP":

        # NO2 lines
        f.write("echo '###############   NO2 lines – HITEMP   ###############'"+"\n")
        f.write('Ccorr_k -F '+pt_lbl+' -D '+dir_hitemp+'10_HITEMP2019.par -R 1 '+band_no+' -c 3000.0 -i '+i_int+' -l 10 1.0e1 -t 1.0e-2 -k -s '+file_name+' +p -lk -o no2_o -m no2_m -L no2_lbl.nc -np '+nprocs+'\n')
        f.write('prep_spec <<EOF'+ '\n')
        f.write(file_name+ '\n')
        f.write('a'+ '\n')
        f.write('5'+ '\n')
        f.write('y'+ '\n')
        f.write('no2_o'+ '\n')
        f.write('-1'+ '\n')
        f.write('EOF'+ '\n')

    elif database == "HITRAN":

        f.write("echo '###############   NO2 lines   ###############'"+"\n")
        f.write('Ccorr_k -F '+pt_lbl+' -D '+dir_hitran+'no2_hitran.par -R 1 '+band_no+' -c 3000.0 -i '+i_int+' -l 10 1.0e1 -t 1.0e-2 -k -s '+file_name+' +p -lk -o no2_o -m no2_m -L no2_lbl.nc -np '+nprocs+'\n')
        f.write('prep_spec <<EOF'+ '\n')
        f.write(file_name+ '\n')
        f.write('a'+ '\n')
        f.write('5'+ '\n')
        f.write('y'+ '\n')
        f.write('no2_o'+ '\n')
        f.write('-1'+ '\n')
        f.write('EOF'+ '\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_no2_lbl" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

##### NH3 #####
if "NH3" in volatile_list and os.path.exists('temp/done_nh3_lbl') == False:

    f.write("echo '###############   NH3 lines – HITRAN    ###############'"+"\n")
    f.write('Ccorr_k -F '+pt_lbl+' -D '+dir_hitran+'nh3_hitran.par -R 1 '+band_no+' -c 3000.0 -i '+i_int+' -l 11 1.0e1 -t 1.0e-2 -k -s '+file_name+' +p -lk -o nh3_o -m nh3_m -L nh3_lbl.nc -np '+nprocs+'\n')
    f.write('prep_spec <<EOF'+ '\n')
    f.write(file_name+ '\n')
    f.write('a'+ '\n')
    f.write('5'+ '\n')
    f.write('y'+ '\n')
    f.write('nh3_o'+ '\n')
    f.write('-1'+ '\n')
    f.write('EOF'+ '\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_nh3_lbl" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

##### HNO3 #####
if "HNO3" in volatile_list and os.path.exists('temp/done_hno3_lbl') == False:

    f.write("echo '###############   HNO3 lines – HITRAN    ###############'"+"\n")
    f.write('Ccorr_k -F '+pt_lbl+' -D '+dir_hitran+'hno3_hitran.par -R 1 '+band_no+' -c 3000.0 -i '+i_int+' -l 12 1.0e1 -t 1.0e-2 -k -s '+file_name+' +p -lk -o hno3_o -m hno3_m -L hno3_lbl.nc -np '+nprocs+'\n')
    f.write('prep_spec <<EOF'+ '\n')
    f.write(file_name+ '\n')
    f.write('a'+ '\n')
    f.write('5'+ '\n')
    f.write('y'+ '\n')
    f.write('hno3_o'+ '\n')
    f.write('-1'+ '\n')
    f.write('EOF'+ '\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_hno3_lbl" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

##### N2 #####
if "N2" in volatile_list and os.path.exists('temp/done_n2_lbl') == False:

    f.write("echo '###############   N2 lines – HITRAN    ###############'"+"\n")
    f.write('Ccorr_k -F '+pt_lbl+' -D '+dir_hitran+'n2_hitran.par -R 1 '+band_no+' -c 3000.0 -i '+i_int+' -l 13 1.0e1 -t 1.0e-2 -k -s '+file_name+' +p -lk -o n2_o -m n2_m -L n2_lbl.nc -np '+nprocs+'\n')
    f.write('prep_spec <<EOF'+ '\n')
    f.write(file_name+ '\n')
    f.write('a'+ '\n')
    f.write('5'+ '\n')
    f.write('y'+ '\n')
    f.write('n2_o'+ '\n')
    f.write('-1'+ '\n')
    f.write('EOF'+ '\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_n2_lbl" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

# # H2 lines
# f.write("echo '###############   H2 lines   ###############'"+"\n")
# f.write('Ccorr_k -F '+pt_lbl+' -D '+dir_hitran+'h2_hitran.par -R 1 '+band_no+' -c 3000.0 -i '+i_int+' -l 23 1.0e1 -t 1.0e-2 -k -s '+file_name+' +p -lk -o h2_o -m h2_m -L h2_lbl.nc -np '+nprocs+'\n')
# f.write('prep_spec <<EOF'+ '\n')
# f.write(file_name+ '\n')
# f.write('a'+ '\n')
# f.write('5'+ '\n')
# f.write('y'+ '\n')
# f.write('h2_o'+ '\n')
# f.write('-1'+ '\n')
# f.write('EOF'+ '\n')

##### OCS #####
if "OCS" in volatile_list and os.path.exists('temp/done_ocs_lbl') == False:

    f.write("echo '###############   OCS lines – HITRAN    ###############'"+"\n")
    f.write('Ccorr_k -F '+pt_lbl+' -D '+dir_hitran+'ocs_hitran.par -R 1 '+band_no+' -c 3000.0 -i '+i_int+' -l 25 1.0e1 -t 1.0e-2 -k -s '+file_name+' +p -lk -o ocs_o -m ocs_m -L ocs_lbl.nc -np '+nprocs+'\n')
    f.write('prep_spec <<EOF'+ '\n')
    f.write(file_name+ '\n')
    f.write('a'+ '\n')
    f.write('5'+ '\n')
    f.write('y'+ '\n')
    f.write('ocs_o'+ '\n')
    f.write('-1'+ '\n')
    f.write('EOF'+ '\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_ocs_lbl" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

###################################
########## Self continua ##########
###################################

# N2-N2 CIA
if "N2" in volatile_list and os.path.exists('temp/done_n2n2_cia') == False:
    f.write("echo '###############   N2-N2 CIA   ###############'"+"\n")
    f.write('Ccorr_k -F '+pt_cia+' -CIA '+dir_continua+'N2-N2_2018_fixed.cia -R 1 '+band_no+' -i '+i_int+' -ct 13 13 1.0e2 -t 1.0e-2 -s '+file_name+' +p -lk -o n2n2_o -m n2n2_m -L n2n2_lbl.nc -np '+nprocs+'\n')
    f.write('prep_spec <<EOF'+ '\n')
    f.write(file_name+ '\n')
    f.write('a'+ '\n')
    f.write('19'+ '\n')
    f.write('y'+ '\n')
    f.write('n2n2_o'+ '\n')
    f.write('-1'+ '\n')
    f.write('EOF'+ '\n')
    # Remove faulty characters
    f.write("sed -i -e 's/\*\*\*\*\*/0/g' "+file_name+'\n')
    f.write("sed -i -e 's/\*\*\*//g' "+file_name+'\n')
    f.write("sed -i -e 's/            NaN/0.000000000E+00/g' "+file_name+'\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_n2n2_cia" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

# O2-O2 CIA
if "O2" in volatile_list and os.path.exists('temp/done_o2o2_cia') == False:
    f.write("echo '###############   O2-O2 CIA   ###############'"+"\n")
    f.write('Ccorr_k -F '+pt_cia+' -CIA '+dir_continua+'O2-O2_2018b_fixed.cia -R 1 '+band_no+' -i '+i_int+' -ct 7 7 1.0e2 -t 1.0e-2 -s '+file_name+' +p -lk -o o2o2_o -m o2o2_m -L o2o2_lbl.nc -np '+nprocs+'\n')
    f.write('prep_spec <<EOF'+ '\n')
    f.write(file_name+ '\n')
    f.write('a'+ '\n')
    f.write('19'+ '\n')
    f.write('y'+ '\n')
    f.write('o2o2_o'+ '\n')
    f.write('-1'+ '\n')
    f.write('EOF'+ '\n')
    # Remove faulty characters
    f.write("sed -i -e 's/\*\*\*\*\*/0/g' "+file_name+'\n')
    f.write("sed -i -e 's/\*\*\*//g' "+file_name+'\n')
    f.write("sed -i -e 's/            NaN/0.000000000E+00/g' "+file_name+'\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_o2o2_cia" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

# H2-H2 CIA
if "H2" in volatile_list and os.path.exists('temp/done_h2h2_cia') == False:
    f.write("echo '###############   H2-H2 CIA   ###############'"+"\n")
    f.write('Ccorr_k -F '+pt_cia+' -CIA '+dir_continua+'H2-H2_CIA_Borysow_combined.cia -R 1 '+band_no+' -i '+i_int+' -ct 23 23 1.0e2 -t 1.0e-2 -s '+file_name+' +p -lk -o h2h2_o -m h2h2_m -L h2h2_lbl.nc -np '+nprocs+'\n')
    f.write('prep_spec <<EOF'+ '\n')
    f.write(file_name+ '\n')
    f.write('a'+ '\n')
    # Select block 19 (CIA data)
    f.write('19'+ '\n')
    f.write('y'+ '\n')
    f.write('h2h2_o'+ '\n')
    f.write('-1'+ '\n')
    f.write('EOF'+ '\n')
    # Remove faulty characters
    f.write("sed -i -e 's/\*\*\*\*\*/0/g' "+file_name+'\n')
    f.write("sed -i -e 's/\*\*\*//g' "+file_name+'\n')
    f.write("sed -i -e 's/            NaN/0.000000000E+00/g' "+file_name+'\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_h2h2_cia" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

# CO2-CO2 CIA
if "CO2" in volatile_list and os.path.exists('temp/done_co2co2_cia') == False:
    f.write("echo '###############   CO2-CO2 CIA   ###############'"+"\n")
    f.write('Ccorr_k -F '+pt_cia+' -CIA '+dir_continua+'CO2-CO2_2018_fixed.cia -R 1 '+band_no+' -i '+i_int+' -ct 2 2 1.0e2 -t 1.0e-2 -s '+file_name+' +p -lk -o co2co2_o -m co2co2_m -L co2co2_lbl.nc -np '+nprocs+'\n')
    f.write('prep_spec <<EOF'+ '\n')
    f.write(file_name+ '\n')
    f.write('a'+ '\n')
    f.write('19'+ '\n')
    f.write('y'+ '\n')
    f.write('co2co2_o'+ '\n')
    f.write('-1'+ '\n')
    f.write('EOF'+ '\n')
    # Remove faulty characters
    f.write("sed -i -e 's/\*\*\*\*\*/0/g' "+file_name+'\n')
    f.write("sed -i -e 's/\*\*\*//g' "+file_name+'\n')
    f.write("sed -i -e 's/            NaN/0.000000000E+00/g' "+file_name+'\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_co2co2_cia" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

# CH4-CH4 CIA
if "CH4" in volatile_list and os.path.exists('temp/done_ch4ch4_cia') == False:
    f.write("echo '###############   CH4-CH4 CIA   ###############'"+"\n")
    f.write('Ccorr_k -F '+pt_cia+' -CIA '+dir_continua+'CH4-CH4_2011.cia -R 1 '+band_no+' -i '+i_int+' -ct 6 6 1.0e2 -t 1.0e-2 -s '+file_name+' +p -lk -o ch4ch4_o -m ch4ch4_m -L ch4ch4_lbl.nc -np '+nprocs+'\n')
    f.write('prep_spec <<EOF'+ '\n')
    f.write(file_name+ '\n')
    f.write('a'+ '\n')
    f.write('19'+ '\n')
    f.write('y'+ '\n')
    f.write('ch4ch4_o'+ '\n')
    f.write('-1'+ '\n')
    f.write('EOF'+ '\n')
    # Remove faulty characters
    f.write("sed -i -e 's/\*\*\*\*\*/0/g' "+file_name+'\n')
    f.write("sed -i -e 's/\*\*\*//g' "+file_name+'\n')
    f.write("sed -i -e 's/            NaN/0.000000000E+00/g' "+file_name+'\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_ch4ch4_cia" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

# H2O-H2O MT_CKD
if ("H2O" in volatile_list) and (database == "HITRAN") and (os.path.exists('temp/done_h2o_mtckd') == False):
    f.write("echo '###############   H2O-H2O MT_CKD   ###############'"+"\n")
    f.write('Ccorr_k -F '+pt_cia+' -R 1 '+band_no+' -c 2500.0 -i '+i_int+' -ct 1 1 10.0 -t 1.0e-3 -e '+dir_continua+'mt_ckd_v3.0_s296 '+dir_continua+'mt_ckd_v3.0_s260 -k -s '+file_name+' +p -lk -o h2o-h2o_l'+band_no+'_1-'+band_no+'c -m h2o-h2o_l'+band_no+'_1-'+band_no+'cm -L h2o-h2o_lbl_lw.nc -lw h2o_l'+band_no+'_1-'+band_no+'map.nc -np '+nprocs+'\n')
    # Add to spec file with prep_spec
    f.write('prep_spec <<EOF'+ '\n')
    f.write(file_name + '\n')
    f.write('a'+ '\n')
    # Select block 19 (CIA data)
    f.write('19'+ '\n')
    f.write('y'+ '\n')
    f.write('h2o-h2o_l'+band_no+'_1-'+band_no+'c'+ '\n')
    f.write('-1'+ '\n')
    f.write('EOF'+ '\n')
    # Remove faulty characters
    f.write("sed -i -e 's/\*\*\*\*\*/0/g' "+file_name+'\n')
    f.write("sed -i -e 's/\*\*\*//g' "+file_name+'\n')
    f.write("sed -i -e 's/            NaN/0.000000000E+00/g' "+file_name+'\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_h2o_mtckd" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

###################################
########## Foreign continua #######
###################################

# CO2-CH4 CIA
if ("CO2" in volatile_list) and ("CO2" in volatile_list) and (os.path.exists('temp/done_co2ch4_cia') == False):
    f.write("echo '###############   CO2-CH4 CIA   ###############'"+"\n")
    f.write('Ccorr_k -F '+pt_cia+' -CIA '+dir_continua+'CO2-CH4_2018.cia -R 1 '+band_no+' -i '+i_int+' -ct 2 6 1.0e2 -t 1.0e-2 -s '+file_name+' +p -lk -o co2ch4_o -m co2ch4_m -L co2ch4_lbl.nc -np '+nprocs+'\n')
    f.write('prep_spec <<EOF'+ '\n')
    f.write(file_name+ '\n')
    f.write('a'+ '\n')
    f.write('19'+ '\n')
    f.write('y'+ '\n')
    f.write('co2ch4_o'+ '\n')
    f.write('-1'+ '\n')
    f.write('EOF'+ '\n')
    # Remove faulty characters and NaNs
    f.write("sed -i -e 's/\*\*\*\*\*/0/g' "+file_name+'\n')
    f.write("sed -i -e 's/\*\*\*//g' "+file_name+'\n')
    f.write("sed -i -e 's/            NaN/0.000000000E+00/g' "+file_name+'\n')
    f.write("sed -i -e 's/          51/           0/g' "+file_name+'\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_co2ch4_cia" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

# CO2-H2 CIA
if ("CO2" in volatile_list) and ("H2" in volatile_list) and (os.path.exists('temp/done_co2h2_cia') == False):
    f.write("echo '###############   CO2-H2 CIA   ###############'"+"\n")
    f.write('Ccorr_k -F '+pt_cia+' -CIA '+dir_continua+'CO2-H2_2018.cia -R 1 '+band_no+' -i '+i_int+' -ct 2 23 1.0e2 -t 1.0e-2 -s '+file_name+' +p -lk -o co2h2_o -m co2h2_m -L co2h2_lbl.nc -np '+nprocs+'\n')
    f.write('prep_spec <<EOF'+ '\n')
    f.write(file_name+ '\n')
    f.write('a'+ '\n')
    f.write('19'+ '\n')
    f.write('y'+ '\n')
    f.write('co2h2_o'+ '\n')
    f.write('-1'+ '\n')
    f.write('EOF'+ '\n')
    # Remove faulty characters
    f.write("sed -i -e 's/\*\*\*\*\*/0/g' "+file_name+'\n')
    f.write("sed -i -e 's/\*\*\*//g' "+file_name+'\n')
    f.write("sed -i -e 's/            NaN/0.000000000E+00/g' "+file_name+'\n')
    f.write("sed -i -e 's/          51/           0/g' "+file_name+'\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_co2h2_cia" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

# CO2-He CIA
if ("CO2" in volatile_list) and ("He" in volatile_list) and (os.path.exists('temp/done_co2he_cia') == False):
    f.write("echo '###############   CO2-He CIA   ###############'"+"\n")
    f.write('Ccorr_k -F '+pt_cia+' -CIA '+dir_continua+'CO2-He_2018.cia -R 1 '+band_no+' -i '+i_int+' -ct 2 24 1.0e2 -t 1.0e-2 -s '+file_name+' +p -lk -o co2he_o -m co2he_m -L co2he_lbl.nc -np '+nprocs+'\n')
    f.write('prep_spec <<EOF'+ '\n')
    f.write(file_name+ '\n')
    f.write('a'+ '\n')
    f.write('19'+ '\n')
    f.write('y'+ '\n')
    f.write('co2he_o'+ '\n')
    f.write('-1'+ '\n')
    f.write('EOF'+ '\n')
    # Remove faulty characters
    f.write("sed -i -e 's/\*\*\*\*\*/0/g' "+file_name+'\n')
    f.write("sed -i -e 's/\*\*\*//g' "+file_name+'\n')
    f.write("sed -i -e 's/            NaN/0.000000000E+00/g' "+file_name+'\n')
    f.write("sed -i -e 's/          51/           0/g' "+file_name+'\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_co2he_cia" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

# CH4-He CIA
if ("CH4" in volatile_list) and ("He" in volatile_list) and (os.path.exists('temp/done_ch4he_cia') == False):
    f.write("echo '###############   CH4-He CIA   ###############'"+"\n")
    f.write('Ccorr_k -F '+pt_cia+' -CIA '+dir_continua+'CH4-He_2018.cia -R 1 '+band_no+' -i '+i_int+' -ct 6 24 1.0e2 -t 1.0e-2 -s '+file_name+' +p -lk -o ch4he_o -m ch4he_m -L ch4he_lbl.nc -np '+nprocs+'\n')
    f.write('prep_spec <<EOF'+ '\n')
    f.write(file_name+ '\n')
    f.write('a'+ '\n')
    f.write('19'+ '\n')
    f.write('y'+ '\n')
    f.write('ch4he_o'+ '\n')
    f.write('-1'+ '\n')
    f.write('EOF'+ '\n')
    # Remove faulty characters
    f.write("sed -i -e 's/\*\*\*\*\*/0/g' "+file_name+'\n')
    f.write("sed -i -e 's/\*\*\*//g' "+file_name+'\n')
    f.write("sed -i -e 's/            NaN/0.000000000E+00/g' "+file_name+'\n')
    f.write("sed -i -e 's/          51/           0/g' "+file_name+'\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_ch4he_cia" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

# O2-CO2 CIA
if ("O2" in volatile_list) and ("CO2" in volatile_list) and (os.path.exists('temp/done_o2co2_cia') == False):
    f.write("echo '###############   O2-CO2 CIA   ###############'"+"\n")
    f.write('Ccorr_k -F '+pt_cia+' -CIA '+dir_continua+'O2-CO2_2011.cia -R 1 '+band_no+' -i '+i_int+' -ct 7 2 1.0e2 -t 1.0e-2 -s '+file_name+' +p -lk -o o2co2_o -m o2co2_m -L o2co2_lbl.nc -np '+nprocs+'\n')
    f.write('prep_spec <<EOF'+ '\n')
    f.write(file_name+ '\n')
    f.write('a'+ '\n')
    f.write('19'+ '\n')
    f.write('y'+ '\n')
    f.write('o2co2_o'+ '\n')
    f.write('-1'+ '\n')
    f.write('EOF'+ '\n')
    # Remove faulty characters
    f.write("sed -i -e 's/\*\*\*\*\*/0/g' "+file_name+'\n')
    f.write("sed -i -e 's/\*\*\*//g' "+file_name+'\n')
    f.write("sed -i -e 's/            NaN/0.000000000E+00/g' "+file_name+'\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_o2co2_cia" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

# O2-N2 CIA
if ("O2" in volatile_list) and ("N2" in volatile_list) and (os.path.exists('temp/done_o2n2_cia') == False):
    f.write("echo '###############   O2-N2 CIA   ###############'"+"\n")
    f.write('Ccorr_k -F '+pt_cia+' -CIA '+dir_continua+'O2-N2_2018_fixed.cia -R 1 '+band_no+' -i '+i_int+' -ct 7 13 1.0e2 -t 1.0e-2 -s '+file_name+' +p -lk -o o2n2_o -m o2n2_m -L o2n2_lbl.nc -np '+nprocs+'\n')
    f.write('prep_spec <<EOF'+ '\n')
    f.write(file_name+ '\n')
    f.write('a'+ '\n')
    f.write('19'+ '\n')
    f.write('y'+ '\n')
    f.write('o2n2_o'+ '\n')
    f.write('-1'+ '\n')
    f.write('EOF'+ '\n')
    # Remove faulty characters
    f.write("sed -i -e 's/\*\*\*\*\*/0/g' "+file_name+'\n')
    f.write("sed -i -e 's/\*\*\*//g' "+file_name+'\n')
    f.write("sed -i -e 's/            NaN/0.000000000E+00/g' "+file_name+'\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_o2n2_cia" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

# N2-H2O CIA
if ("N2" in volatile_list) and ("H2O" in volatile_list) and (os.path.exists('temp/done_n2h2o_cia') == False):
    f.write("echo '###############   N2-H2O CIA   ###############'"+"\n")
    f.write('Ccorr_k -F '+pt_cia+' -CIA '+dir_continua+'N2-H2O_2018.cia -R 1 '+band_no+' -i '+i_int+' -ct 13 1 1.0e2 -t 1.0e-2 -s '+file_name+' +p -lk -o n2h2o_o -m n2h2o_m -L n2h2o_lbl.nc -np '+nprocs+'\n')
    f.write(file_name+ '\n')
    f.write('a'+ '\n')
    f.write('19'+ '\n')
    f.write('y'+ '\n')
    f.write('n2h2o_o'+ '\n')
    f.write('-1'+ '\n')
    f.write('EOF'+ '\n')
    # Remove faulty characters
    f.write("sed -i -e 's/\*\*\*\*\*/0/g' "+file_name+'\n')
    f.write("sed -i -e 's/\*\*\*//g' "+file_name+'\n')
    f.write("sed -i -e 's/            NaN/0.000000000E+00/g' "+file_name+'\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_n2h2o_cia" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

# N2-CH4 CIA
if ("N2" in volatile_list) and ("CH4" in volatile_list) and (os.path.exists('temp/done_n2ch4_cia') == False):
    f.write("echo '###############   N2-CH4 CIA   ###############'"+"\n")
    f.write('Ccorr_k -F '+pt_cia+' -CIA '+dir_continua+'N2-CH4_2011.cia -R 1 '+band_no+' -i '+i_int+' -ct 13 6 1.0e2 -t 1.0e-2 -s '+file_name+' +p -lk -o n2ch4_o -m n2ch4_m -L n2ch4_lbl.nc -np '+nprocs+'\n')
    f.write('prep_spec <<EOF'+ '\n')
    f.write(file_name+ '\n')
    f.write('a'+ '\n')
    f.write('19'+ '\n')
    f.write('y'+ '\n')
    f.write('n2ch4_o'+ '\n')
    f.write('-1'+ '\n')
    f.write('EOF'+ '\n')
    # Remove faulty characters
    f.write("sed -i -e 's/\*\*\*\*\*/0/g' "+file_name+'\n')
    f.write("sed -i -e 's/\*\*\*//g' "+file_name+'\n')
    f.write("sed -i -e 's/            NaN/0.000000000E+00/g' "+file_name+'\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_n2ch4_cia" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

# N2-H2 CIA
if ("N2" in volatile_list) and ("H2" in volatile_list) and (os.path.exists('temp/done_n2h2_cia') == False):
    f.write("echo '###############   N2-H2 CIA   ###############'"+"\n")
    f.write('Ccorr_k -F '+pt_cia+' -CIA '+dir_continua+'N2-H2_2011.cia -R 1 '+band_no+' -i '+i_int+' -ct 13 23 1.0e2 -t 1.0e-2 -s '+file_name+' +p -lk -o n2h2_o -m n2h2_m -L n2h2_lbl.nc -np '+nprocs+'\n')
    f.write('prep_spec <<EOF'+ '\n')
    f.write(file_name+ '\n')
    f.write('a'+ '\n')
    f.write('19'+ '\n')
    f.write('y'+ '\n')
    f.write('n2h2_o'+ '\n')
    f.write('-1'+ '\n')
    f.write('EOF'+ '\n')
    # Remove faulty characters
    f.write("sed -i -e 's/\*\*\*\*\*/0/g' "+file_name+'\n')
    f.write("sed -i -e 's/\*\*\*//g' "+file_name+'\n')
    f.write("sed -i -e 's/            NaN/0.000000000E+00/g' "+file_name+'\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_n2h2_cia" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

# N2-He CIA
if ("N2" in volatile_list) and ("He" in volatile_list) and (os.path.exists('temp/done_n2he_cia') == False):
    f.write("echo '###############   N2-He CIA   ###############'"+"\n")
    f.write('Ccorr_k -F '+pt_cia+' -CIA '+dir_continua+'N2-He_2018.cia -R 1 '+band_no+' -i '+i_int+' -ct 13 24 1.0e2 -t 1.0e-2 -s '+file_name+' +p -lk -o n2he_o -m n2he_m -L n2he_lbl.nc -np '+nprocs+'\n')
    f.write('prep_spec <<EOF'+ '\n')
    f.write(file_name+ '\n')
    f.write('a'+ '\n')
    f.write('19'+ '\n')
    f.write('y'+ '\n')
    f.write('n2he_o'+ '\n')
    f.write('-1'+ '\n')
    f.write('EOF'+ '\n')
    # Remove faulty characters
    f.write("sed -i -e 's/\*\*\*\*\*/0/g' "+file_name+'\n')
    f.write("sed -i -e 's/\*\*\*//g' "+file_name+'\n')
    f.write("sed -i -e 's/            NaN/0.000000000E+00/g' "+file_name+'\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_n2he_cia" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

# H2-CH4 CIA
if ("H2" in volatile_list) and ("CH4" in volatile_list) and (os.path.exists('temp/done_h2ch4_cia') == False):
    f.write("echo '###############   H2-CH4 CIA   ###############'"+"\n")
    f.write('Ccorr_k -F '+pt_cia+' -CIA '+dir_continua+'H2-CH4_eq_2011.cia -R 1 '+band_no+' -i '+i_int+' -ct 23 6 1.0e2 -t 1.0e-2 -s '+file_name+' +p -lk -o h2ch4_o -m h2ch4_m -L h2ch4_lbl.nc -np '+nprocs+'\n')
    f.write('prep_spec <<EOF'+ '\n')
    f.write(file_name+ '\n')
    f.write('a'+ '\n')
    # Select block 19 (CIA data)
    f.write('19'+ '\n')
    f.write('y'+ '\n')
    f.write('h2ch4_o'+ '\n')
    f.write('-1'+ '\n')
    f.write('EOF'+ '\n')
    # Remove faulty characters
    f.write("sed -i -e 's/\*\*\*\*\*/0/g' "+file_name+'\n')
    f.write("sed -i -e 's/\*\*\*//g' "+file_name+'\n')
    f.write("sed -i -e 's/            NaN/0.000000000E+00/g' "+file_name+'\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_h2ch4_cia" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

# H2-He CIA
if ("H2" in volatile_list) and ("He" in volatile_list) and (os.path.exists('temp/done_h2he_cia') == False):
    f.write("echo '###############   H2-He CIA   ###############'"+"\n")
    f.write('Ccorr_k -F '+pt_cia+' -CIA '+dir_continua+'H2-He_2011.cia -R 1 '+band_no+' -i '+i_int+' -ct 23 24 1.0e2 -t 1.0e-2 -s '+file_name+' +p -lk -o h2he_o -m h2he_m -L h2he_lbl.nc -np '+nprocs+'\n')
    f.write('prep_spec <<EOF'+ '\n')
    f.write(file_name+ '\n')
    f.write('a'+ '\n')
    f.write('19'+ '\n')
    f.write('y'+ '\n')
    f.write('h2he_o'+ '\n')
    f.write('-1'+ '\n')
    f.write('EOF'+ '\n')
    # Remove faulty characters
    f.write("sed -i -e 's/\*\*\*\*\*/0/g' "+file_name+'\n')
    f.write("sed -i -e 's/\*\*\*//g' "+file_name+'\n')
    f.write("sed -i -e 's/            NaN/0.000000000E+00/g' "+file_name+'\n')
    
    # Create file to mark as done
    f.write("touch " + "temp/done_h2he_cia" + '\n')
    # Save copy in temp/
    rs_no = str(int(rs_no)+1)
    f.write("rsync -av "+file_name+" temp/"+file_name+"_"+rs_no+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_"+rs_no+"_k"+"\n")

###############################
### Complete and close file ###
###############################

if write_spectrum == 1:

    # Save copy in temp/
    f.write("rsync -av "+file_name+" temp/"+file_name+"_no_spectrum"+"\n")
    f.write("rsync -av "+file_name+"_k"+" temp/"+file_name+"_no_spectrum"+"_k"+"\n")

    # Add to spec file with prep_spec
    f.write('prep_spec <<EOF'+ '\n')
    # Select spectral file
    f.write(file_name+ '\n')
    # Append
    f.write('a'+ '\n')
    # Thermal source function
    f.write('6'+ '\n')
    f.write('n'+ '\n')
    # Select table fit
    f.write('T'+ '\n')
    # Temperature range in K
    f.write('100 4000'+ '\n')
    # Number of points
    f.write('100'+ '\n')

    # Solar spectrum
    f.write('2'+ '\n')
    # No filter function
    f.write('n'+ '\n')
    # Path to spectrum data
    f.write(dir_socrates+'data/solar/kurucz_95'+ '\n')
    # Assign flux outside data range to bands on edge
    f.write('y'+ '\n')

    # Exit
    f.write('-1'+ '\n')
    f.write('EOF'+ '\n')

# Close
f.close()
os.chmod(exec_file_name,0o777)

#######################

# Run script
os.system('./'+exec_file_name)

# Remove auxiliary files
os.system('rm -rf *_lbl_*')
os.system('rm -rf *_lbl.nc')
os.system('rm -rf *_m')
os.system('rm -rf *_o')
os.system('rm -rf *_o.nc')
os.system('rm -rf *_l')
os.system('rm -rf *h2o_*')
os.system('rm -rf *co2_*')
os.system('rm -rf *o3_*')
os.system('rm -rf *n2o_*')
os.system('rm -rf *co_*')
os.system('rm -rf *ch4_*')
os.system('rm -rf *o2_*')
os.system('rm -rf *no_*')
os.system('rm -rf *so2_*')
os.system('rm -rf *no2_*')
os.system('rm -rf *nh3_*')
os.system('rm -rf *hno3_*')
os.system('rm -rf *n2_*')
os.system('rm -rf *h2_*')
os.system('rm -rf *he_*')
os.system('rm -rf *ocs_*')

kfile = file_name+'_k'

# Open original file
print("Cleaning k-table file")
old = open(kfile,'r')

# Work out the pitch of data in the file
lines = old.readlines()
sample = str(lines[10]).split() # use line 0 as a sample of the data
pitch = int(len(sample[0]) + 1)
if pitch < 8:
	raise Exception("Could not parse file '%s'" % kfile)

# Remove temp file if it already exists
temp_file = "temp_k_clean"
if os.path.isfile(temp_file):
    os.remove(temp_file)

# Replace NaN values with zero
new = open(temp_file,'w')
for l in lines:
	f = " "*(pitch-3) + "NaN" 				# search for this
	r = " 0." + "0"*(pitch-7) + "E+00" 		# replace with this
	n = str(l).replace(f,r)					# do replacement
	new.write(n)							# write to temp file
	
# Done writing
old.close()
new.close()

# Copy 'temp' file into location of 'old' file
os.remove(kfile)
shutil.copyfile(temp_file, kfile)
os.remove(temp_file)


