# Autogenerated from src/radiance_core/def_control.F90
# svn revision 1226


    mutable struct StrCtrl
        cptr::Ptr{Cvoid}

        function StrCtrl()
            handle = new(ccall((:PS_create_StrCtrl, libSOCRATES_C), Ptr{Cvoid}, ()))
            finalizer(delete_StrCtrl, handle)
            return handle
        end
    end

    function delete_StrCtrl(handle::StrCtrl)
        if getfield(handle, :cptr) == Ptr{Cvoid}()
            ccall(:jl_safe_printf, Cvoid, (Cstring, ), "error: delete_StrCtrl attempt to delete null pointer")
        else
            ccall((:PS_delete_StrCtrl, libSOCRATES_C), Cvoid, (Ptr{Cvoid},), getfield(handle, :cptr))
            setfield!(handle, :cptr, Ptr{Cvoid}())
        end
        return nothing
    end


    # this is used to show values in the REPL and when using IJulia
    function Base.show(io::IO, m::MIME"text/plain", handle::StrCtrl)
        println(io, handle)
        dump_properties(io, handle)                
    end


    function Base.propertynames(handle::StrCtrl, private::Bool=false)
        names = [
            :spectral_file,
            :isolir,
            :first_band,
            :last_band,
            :l_microphysics,
            :l_gas,
            :l_rayleigh,
            :l_continuum,
            :l_cont_gen,
            :l_cloud,
            :l_drop,
            :l_ice,
            :l_aerosol,
            :l_aerosol_mode,
            :l_aerosol_ccn,
            :l_solar_tail_flux,
            :l_orog,
            :l_orog_fix,
            :l_solvar,
            :i_gas_overlap,
            :n_esft_red,
            :gpnt_split,
            :i_gas,
            :l_h2o,
            :l_o2,
            :l_n2o,
            :l_ch4,
            :l_cfc11,
            :l_cfc12,
            :l_cfc113,
            :l_cfc114,
            :l_hcfc22,
            :l_hfc125,
            :l_hfc134a,
            :l_co,
            :l_nh3,
            :l_tio,
            :l_vo,
            :l_h2,
            :l_he,
            :l_na,
            :l_k,
            :l_co2,
            :l_feh,
            :l_crh,
            :l_li,
            :l_rb,
            :l_cs,
            :l_ph3,
            :l_c2h2,
            :l_hcn,
            :l_o3,
            :l_so2,
            :l_no2,
            :l_n2,
            :l_ar,
            :l_o,
            :l_n,
            :l_hno3,
            :l_no,
            :l_no3,
            :l_n2o5,
            :l_hono,
            :l_ho2no2,
            :l_h2o2,
            :l_c2h6,
            :l_ch3,
            :l_h2co,
            :l_ho2,
            :l_hdo,
            :l_hcl,
            :l_hf,
            :l_cosso,
            :l_tosso,
            :l_yosos,
            :l_h2s,
            :l_cocs,
            :i_cloud,
            :i_cloud_representation,
            :i_st_water,
            :i_cnv_water,
            :i_st_ice,
            :i_cnv_ice,
            :i_inhom,
            :i_mcica_sampling,
            :i_overlap,
            :i_drop_re,
            :l_local_cnv_partition,
            :l_global_cloud_top,
            :l_avg_phase_fnc,
            :n_channel,
            :i_angular_integration,
            :i_2stream,
            :i_solver,
            :i_solver_clear,
            :n_order_gauss,
            :i_truncation,
            :i_sph_algorithm,
            :n_order_phase_solar,
            :ls_global_trunc,
            :ms_min,
            :ms_max,
            :ls_brdf_trunc,
            :n_order_forward,
            :i_sph_mode,
            :i_scatter_method,
            :i_solar_src,
            :i_direct_tau,
            :l_ir_source_quad,
            :l_rescale,
            :l_spherical_solar,
            :l_spherical_diffuse,
            :l_henyey_greenstein_pf,
            :l_lanczos,
            :l_euler_trnf,
            :accuracy_adaptive,
            :euler_factor,
            :half_angle,
            :l_tile,
            :l_tile_emissivity,
            :l_flux_ground,
            :l_flux_tile,
            :l_extra_top,
            :l_rad_deg,
            :l_subsample,
            :l_mixing_ratio,
            :l_map_sub_bands,
            :i_scatter_method_band,
            :i_gas_overlap_band,
            :map_channel,
            :weight_band,
            :weight_diag,
            :l_clear_band,
            :l_clear,
            :l_flux_div,
            :l_blue_flux_surf,
            :l_cloud_absorptivity,
            :l_cloud_extinction,
            :l_ls_cloud_absorptivity,
            :l_ls_cloud_extinction,
            :l_cnv_cloud_absorptivity,
            :l_cnv_cloud_extinction,
            :l_flux_direct_band,
            :l_flux_direct_div_band,
            :l_flux_direct_sph_band,
            :l_flux_down_band,
            :l_flux_up_band,
            :l_flux_div_band,
            :l_flux_direct_clear_band,
            :l_flux_direct_clear_div_band,
            :l_flux_direct_clear_sph_band,
            :l_flux_down_clear_band,
            :l_flux_up_clear_band,
            :l_flux_div_clear_band,
            :l_actinic_flux,
            :l_actinic_flux_clear,
            :l_actinic_flux_band,
            :l_actinic_flux_clear_band,
            :l_photolysis_rate,
            :l_photolysis_rate_clear,
            :l_photolysis_div,
            :l_photolysis_div_clear,
            :l_aerosol_absorption_band,
            :l_aerosol_scattering_band,
            :l_aerosol_asymmetry_band,
            :l_spherical_path_diag,
            :l_contrib_func,
            :l_contrib_func_band,
            :l_geostationary,
            :sat_desc,
            :sat_hgt,
            :sat_lon,
            :sat_lat,
            :max_view_lon,
            :min_view_lon,
            :max_view_lat,
            :min_view_lat,
        ]

        return names
    end


    function Base.getproperty(handle::StrCtrl, field::Symbol)


        cptr = getfield(handle, :cptr)
        cptr != Ptr{Cvoid}() || error("invalid handle (null cptr)")            


        if field == :cptr
            return cptr

        elseif field in (
            :l_microphysics,
            :l_gas,
            :l_rayleigh,
            :l_continuum,
            :l_cont_gen,
            :l_cloud,
            :l_drop,
            :l_ice,
            :l_aerosol,
            :l_aerosol_mode,
            :l_aerosol_ccn,
            :l_solar_tail_flux,
            :l_orog,
            :l_orog_fix,
            :l_solvar,
            :l_h2o,
            :l_o2,
            :l_n2o,
            :l_ch4,
            :l_cfc11,
            :l_cfc12,
            :l_cfc113,
            :l_cfc114,
            :l_hcfc22,
            :l_hfc125,
            :l_hfc134a,
            :l_co,
            :l_nh3,
            :l_tio,
            :l_vo,
            :l_h2,
            :l_he,
            :l_na,
            :l_k,
            :l_co2,
            :l_feh,
            :l_crh,
            :l_li,
            :l_rb,
            :l_cs,
            :l_ph3,
            :l_c2h2,
            :l_hcn,
            :l_o3,
            :l_so2,
            :l_no2,
            :l_n2,
            :l_ar,
            :l_o,
            :l_n,
            :l_hno3,
            :l_no,
            :l_no3,
            :l_n2o5,
            :l_hono,
            :l_ho2no2,
            :l_h2o2,
            :l_c2h6,
            :l_ch3,
            :l_h2co,
            :l_ho2,
            :l_hdo,
            :l_hcl,
            :l_hf,
            :l_cosso,
            :l_tosso,
            :l_yosos,
            :l_h2s,
            :l_cocs,
            :l_local_cnv_partition,
            :l_global_cloud_top,
            :l_avg_phase_fnc,
            :l_ir_source_quad,
            :l_rescale,
            :l_spherical_solar,
            :l_spherical_diffuse,
            :l_henyey_greenstein_pf,
            :l_lanczos,
            :l_euler_trnf,
            :l_tile,
            :l_tile_emissivity,
            :l_flux_ground,
            :l_extra_top,
            :l_rad_deg,
            :l_subsample,
            :l_mixing_ratio,
            :l_map_sub_bands,
            :l_clear,
            :l_flux_div,
            :l_blue_flux_surf,
            :l_cloud_absorptivity,
            :l_cloud_extinction,
            :l_ls_cloud_absorptivity,
            :l_ls_cloud_extinction,
            :l_cnv_cloud_absorptivity,
            :l_cnv_cloud_extinction,
            :l_flux_direct_band,
            :l_flux_direct_div_band,
            :l_flux_direct_sph_band,
            :l_flux_down_band,
            :l_flux_up_band,
            :l_flux_div_band,
            :l_flux_direct_clear_band,
            :l_flux_direct_clear_div_band,
            :l_flux_direct_clear_sph_band,
            :l_flux_down_clear_band,
            :l_flux_up_clear_band,
            :l_flux_div_clear_band,
            :l_actinic_flux,
            :l_actinic_flux_clear,
            :l_actinic_flux_band,
            :l_actinic_flux_clear_band,
            :l_photolysis_rate,
            :l_photolysis_rate_clear,
            :l_photolysis_div,
            :l_photolysis_div_clear,
            :l_aerosol_absorption_band,
            :l_aerosol_scattering_band,
            :l_aerosol_asymmetry_band,
            :l_spherical_path_diag,
            :l_contrib_func,
            :l_contrib_func_band,
            :l_geostationary,
        )
            
            val = Ref{Cuchar}()
            field_ok = ccall(
                (:PS_StrCtrl_get_logical, libSOCRATES_C),
                Cuchar,
                (Ptr{Cvoid}, Cstring, Ref{Cuchar}),
                cptr, String(field), val
            )
            Bool(field_ok) || error("StrCtrl logical field $field not present - coding error")
            return Bool(val[])
        elseif field in (
            :isolir,
            :first_band,
            :last_band,
            :i_gas_overlap,
            :n_esft_red,
            :i_gas,
            :i_cloud,
            :i_cloud_representation,
            :i_st_water,
            :i_cnv_water,
            :i_st_ice,
            :i_cnv_ice,
            :i_inhom,
            :i_mcica_sampling,
            :i_overlap,
            :i_drop_re,
            :n_channel,
            :i_angular_integration,
            :i_2stream,
            :i_solver,
            :i_solver_clear,
            :n_order_gauss,
            :i_truncation,
            :i_sph_algorithm,
            :n_order_phase_solar,
            :ls_global_trunc,
            :ms_min,
            :ms_max,
            :ls_brdf_trunc,
            :n_order_forward,
            :i_sph_mode,
            :i_scatter_method,
            :i_solar_src,
            :i_direct_tau,
        )
            val = Ref{Cint}()
            field_ok = ccall(
                (:PS_StrCtrl_get_integer, libSOCRATES_C),
                Cuchar,
                (Ptr{Cvoid}, Cstring, Ref{Cint}),
                cptr, String(field), val
            )
            Bool(field_ok) || error("StrCtrl integer field $field not present - coding error")
            return val[]
        elseif field in (
            :gpnt_split,
            :accuracy_adaptive,
            :euler_factor,
            :half_angle,
            :sat_hgt,
            :sat_lon,
            :sat_lat,
            :max_view_lon,
            :min_view_lon,
            :max_view_lat,
            :min_view_lat,
        )
            val = Ref{Cdouble}()
            field_ok = ccall(
                (:PS_StrCtrl_get_real, libSOCRATES_C),
                Cuchar,
                (Ptr{Cvoid}, Cstring, Ref{Cdouble}),
                cptr, String(field), val
            )
            Bool(field_ok) || error("StrCtrl real field $field not present - coding error")
            return val[]
        elseif field in (
            :l_flux_tile,
            :l_clear_band,
        )
            loc = Ref{Ptr{Cint}}()
            ndim = Ref{Cint}(10)
            dims = zeros(Cint, ndim[])
            lbounds = zeros(Cint, ndim[])
            field_ok = ccall(
                (:PS_StrCtrl_get_logical_array, libSOCRATES_C),
                Cuchar, 
                (Ptr{Cvoid}, Cstring, Ref{Ptr{Cint}}, Ref{Cint}, Ref{Cint}, Ref{Cint}),
                cptr, String(field), loc, dims, ndim, lbounds
            )
            Bool(field_ok) || error("StrCtrl Cint array field $field not present - coding error")
            if loc[] == C_NULL
                return nothing
            else
                a = unsafe_wrap(Array, loc[], Tuple(dims[1:ndim[]]), own=false)
                oa = OffsetArray(a, (lbounds[1:ndim[]] .- 1)...)
                return oa
            end
        elseif field in (
            :i_scatter_method_band,
            :i_gas_overlap_band,
            :map_channel,
        )
            loc = Ref{Ptr{Cint}}()
            ndim = Ref{Cint}(10)
            dims = zeros(Cint, ndim[])
            lbounds = zeros(Cint, ndim[])
            field_ok = ccall(
                (:PS_StrCtrl_get_integer_array, libSOCRATES_C),
                Cuchar, 
                (Ptr{Cvoid}, Cstring, Ref{Ptr{Cint}}, Ref{Cint}, Ref{Cint}, Ref{Cint}),
                cptr, String(field), loc, dims, ndim, lbounds
            )
            Bool(field_ok) || error("StrCtrl Cint array field $field not present - coding error")
            if loc[] == C_NULL
                return nothing
            else
                a = unsafe_wrap(Array, loc[], Tuple(dims[1:ndim[]]), own=false)
                oa = OffsetArray(a, (lbounds[1:ndim[]] .- 1)...)
                return oa
            end
        elseif field in (
            :weight_band,
            :weight_diag,
        )
            loc = Ref{Ptr{Cdouble}}()
            ndim = Ref{Cint}(10)
            dims = zeros(Cint, ndim[])
            lbounds = zeros(Cint, ndim[])
            field_ok = ccall(
                (:PS_StrCtrl_get_real_array, libSOCRATES_C),
                Cuchar, 
                (Ptr{Cvoid}, Cstring, Ref{Ptr{Cdouble}}, Ref{Cint}, Ref{Cint}, Ref{Cint}),
                cptr, String(field), loc, dims, ndim, lbounds
            )
            Bool(field_ok) || error("StrCtrl Cdouble array field $field not present - coding error")
            if loc[] == C_NULL
                return nothing
            else
                a = unsafe_wrap(Array, loc[], Tuple(dims[1:ndim[]]), own=false)
                oa = OffsetArray(a, (lbounds[1:ndim[]] .- 1)...)
                return oa
            end
        elseif field in (
            :spectral_file,
            :sat_desc,
        )
            val = zeros(Cuchar, 1024)
            field_ok = ccall(
                (:PS_StrCtrl_get_string, libSOCRATES_C),
                Cuchar, 
                (Ptr{Cvoid}, Cstring, Ptr{Cuchar}, Csize_t),
                cptr, String(field), val, length(val)
            )
            Bool(field_ok) || error("StrCtrl string field $field not present or truncated")
            len = findfirst(iszero, val) - 1
            return rstrip(String(val[1:len]))
        else
            return getfield(handle, field)
        end    
           
    end


    function Base.setproperty!(handle::StrCtrl, field::Symbol, val)
              

        cptr = getfield(handle, :cptr)
        cptr != Ptr{Cvoid}() || error("invalid handle (null cptr)")            

        if field in (
            :l_microphysics,
            :l_gas,
            :l_rayleigh,
            :l_continuum,
            :l_cont_gen,
            :l_cloud,
            :l_drop,
            :l_ice,
            :l_aerosol,
            :l_aerosol_mode,
            :l_aerosol_ccn,
            :l_solar_tail_flux,
            :l_orog,
            :l_orog_fix,
            :l_solvar,
            :l_h2o,
            :l_o2,
            :l_n2o,
            :l_ch4,
            :l_cfc11,
            :l_cfc12,
            :l_cfc113,
            :l_cfc114,
            :l_hcfc22,
            :l_hfc125,
            :l_hfc134a,
            :l_co,
            :l_nh3,
            :l_tio,
            :l_vo,
            :l_h2,
            :l_he,
            :l_na,
            :l_k,
            :l_co2,
            :l_feh,
            :l_crh,
            :l_li,
            :l_rb,
            :l_cs,
            :l_ph3,
            :l_c2h2,
            :l_hcn,
            :l_o3,
            :l_so2,
            :l_no2,
            :l_n2,
            :l_ar,
            :l_o,
            :l_n,
            :l_hno3,
            :l_no,
            :l_no3,
            :l_n2o5,
            :l_hono,
            :l_ho2no2,
            :l_h2o2,
            :l_c2h6,
            :l_ch3,
            :l_h2co,
            :l_ho2,
            :l_hdo,
            :l_hcl,
            :l_hf,
            :l_cosso,
            :l_tosso,
            :l_yosos,
            :l_h2s,
            :l_cocs,
            :l_local_cnv_partition,
            :l_global_cloud_top,
            :l_avg_phase_fnc,
            :l_ir_source_quad,
            :l_rescale,
            :l_spherical_solar,
            :l_spherical_diffuse,
            :l_henyey_greenstein_pf,
            :l_lanczos,
            :l_euler_trnf,
            :l_tile,
            :l_tile_emissivity,
            :l_flux_ground,
            :l_extra_top,
            :l_rad_deg,
            :l_subsample,
            :l_mixing_ratio,
            :l_map_sub_bands,
            :l_clear,
            :l_flux_div,
            :l_blue_flux_surf,
            :l_cloud_absorptivity,
            :l_cloud_extinction,
            :l_ls_cloud_absorptivity,
            :l_ls_cloud_extinction,
            :l_cnv_cloud_absorptivity,
            :l_cnv_cloud_extinction,
            :l_flux_direct_band,
            :l_flux_direct_div_band,
            :l_flux_direct_sph_band,
            :l_flux_down_band,
            :l_flux_up_band,
            :l_flux_div_band,
            :l_flux_direct_clear_band,
            :l_flux_direct_clear_div_band,
            :l_flux_direct_clear_sph_band,
            :l_flux_down_clear_band,
            :l_flux_up_clear_band,
            :l_flux_div_clear_band,
            :l_actinic_flux,
            :l_actinic_flux_clear,
            :l_actinic_flux_band,
            :l_actinic_flux_clear_band,
            :l_photolysis_rate,
            :l_photolysis_rate_clear,
            :l_photolysis_div,
            :l_photolysis_div_clear,
            :l_aerosol_absorption_band,
            :l_aerosol_scattering_band,
            :l_aerosol_asymmetry_band,
            :l_spherical_path_diag,
            :l_contrib_func,
            :l_contrib_func_band,
            :l_geostationary,
        )
                                
            field_ok = ccall(
                (:PS_StrCtrl_set_logical, libSOCRATES_C),
                Cuchar, 
                (Ptr{Cvoid}, Cstring, Cuchar),
                cptr, String(field), val
            )
            Bool(field_ok) || error("StrCtrl logical field $field not present - coding error")
            return val
        elseif field in (
            :isolir,
            :first_band,
            :last_band,
            :i_gas_overlap,
            :n_esft_red,
            :i_gas,
            :i_cloud,
            :i_cloud_representation,
            :i_st_water,
            :i_cnv_water,
            :i_st_ice,
            :i_cnv_ice,
            :i_inhom,
            :i_mcica_sampling,
            :i_overlap,
            :i_drop_re,
            :n_channel,
            :i_angular_integration,
            :i_2stream,
            :i_solver,
            :i_solver_clear,
            :n_order_gauss,
            :i_truncation,
            :i_sph_algorithm,
            :n_order_phase_solar,
            :ls_global_trunc,
            :ms_min,
            :ms_max,
            :ls_brdf_trunc,
            :n_order_forward,
            :i_sph_mode,
            :i_scatter_method,
            :i_solar_src,
            :i_direct_tau,
        )
                    
            field_ok = ccall(
                (:PS_StrCtrl_set_integer, libSOCRATES_C),
                Cuchar,
                (Ptr{Cvoid}, Cstring, Cint),
                cptr, String(field), val
            )
            Bool(field_ok) || error("StrCtrl integer field $field not present - coding error")
            return val
        elseif field in (
            :gpnt_split,
            :accuracy_adaptive,
            :euler_factor,
            :half_angle,
            :sat_hgt,
            :sat_lon,
            :sat_lat,
            :max_view_lon,
            :min_view_lon,
            :max_view_lat,
            :min_view_lat,
        )
                    
            field_ok = ccall(
                (:PS_StrCtrl_set_real, libSOCRATES_C),
                Cuchar,
                (Ptr{Cvoid}, Cstring, Cdouble),
                cptr, String(field), val
            )
            Bool(field_ok) || error("StrCtrl real field $field not present - coding error")
            return val
        elseif field in (
            :spectral_file,
            :sat_desc,
        )
                    
            field_ok = ccall(
                (:PS_StrCtrl_set_string, libSOCRATES_C),
                Cuchar,
                (Ptr{Cvoid}, Cstring, Cstring),
                cptr, String(field), val
            )
            Bool(field_ok) || error("StrCtrl string field $field not present or truncated")
            return val
        else
            error("type StrCtrl has no writeable field $field")    
        end    
           
    end

