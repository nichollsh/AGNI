# Autogenerated from src/radiance_core/def_out.F90
# svn revision 1226


    mutable struct StrOut
        cptr::Ptr{Cvoid}

        function StrOut()
            handle = new(ccall((:PS_create_StrOut, libSOCRATES_C), Ptr{Cvoid}, ()))
            finalizer(delete_StrOut, handle)
            return handle
        end
    end

    function delete_StrOut(handle::StrOut)
        if getfield(handle, :cptr) == Ptr{Cvoid}()
            ccall(:jl_safe_printf, Cvoid, (Cstring, ), "error: delete_StrOut attempt to delete null pointer")
        else
            ccall((:PS_delete_StrOut, libSOCRATES_C), Cvoid, (Ptr{Cvoid},), getfield(handle, :cptr))
            setfield!(handle, :cptr, Ptr{Cvoid}())
        end
        return nothing
    end


    # this is used to show values in the REPL and when using IJulia
    function Base.show(io::IO, m::MIME"text/plain", handle::StrOut)
        println(io, handle)
        dump_properties(io, handle)                
    end


    function Base.propertynames(handle::StrOut, private::Bool=false)
        names = [
            :flux_direct,
            :flux_down,
            :flux_up,
            :flux_div,
            :flux_direct_clear,
            :flux_down_clear,
            :flux_up_clear,
            :flux_div_clear,
            :flux_direct_div,
            :flux_direct_sph,
            :flux_direct_clear_div,
            :flux_direct_clear_sph,
            :radiance,
            :photolysis,
            :solar_tail_flux,
            :contrib_funci,
            :contrib_funcf,
            :flux_up_tile,
            :flux_up_blue_tile,
            :flux_direct_blue_surf,
            :flux_down_blue_surf,
            :flux_up_blue_surf,
            :flux_direct_band,
            :flux_direct_div_band,
            :flux_direct_sph_band,
            :flux_down_band,
            :flux_up_band,
            :flux_div_band,
            :flux_direct_clear_band,
            :flux_direct_clear_div_band,
            :flux_direct_clear_sph_band,
            :flux_down_clear_band,
            :flux_up_clear_band,
            :flux_div_clear_band,
            :contrib_funci_band,
            :contrib_funcf_band,
            :actinic_flux,
            :actinic_flux_clear,
            :actinic_flux_band,
            :actinic_flux_clear_band,
            :photolysis_rate,
            :photolysis_rate_clear,
            :photolysis_div,
            :photolysis_div_clear,
            :tot_cloud_cover,
            :cloud_absorptivity,
            :cloud_weight_absorptivity,
            :ls_cloud_absorptivity,
            :ls_cloud_weight_absorptivity,
            :cnv_cloud_absorptivity,
            :cnv_cloud_weight_absorptivity,
            :cloud_extinction,
            :cloud_weight_extinction,
            :ls_cloud_extinction,
            :ls_cloud_weight_extinction,
            :cnv_cloud_extinction,
            :cnv_cloud_weight_extinction,
            :aerosol_absorption_band,
            :aerosol_scattering_band,
            :aerosol_asymmetry_band,
            :spherical_path,
        ]

        return names
    end


    function Base.getproperty(handle::StrOut, field::Symbol)


        cptr = getfield(handle, :cptr)
        cptr != Ptr{Cvoid}() || error("invalid handle (null cptr)")            


        if field == :cptr
            return cptr

        elseif field in (
            :flux_direct,
            :flux_down,
            :flux_up,
            :flux_div,
            :flux_direct_clear,
            :flux_down_clear,
            :flux_up_clear,
            :flux_div_clear,
            :flux_direct_div,
            :flux_direct_sph,
            :flux_direct_clear_div,
            :flux_direct_clear_sph,
            :radiance,
            :photolysis,
            :solar_tail_flux,
            :contrib_funci,
            :contrib_funcf,
            :flux_up_tile,
            :flux_up_blue_tile,
            :flux_direct_blue_surf,
            :flux_down_blue_surf,
            :flux_up_blue_surf,
            :flux_direct_band,
            :flux_direct_div_band,
            :flux_direct_sph_band,
            :flux_down_band,
            :flux_up_band,
            :flux_div_band,
            :flux_direct_clear_band,
            :flux_direct_clear_div_band,
            :flux_direct_clear_sph_band,
            :flux_down_clear_band,
            :flux_up_clear_band,
            :flux_div_clear_band,
            :contrib_funci_band,
            :contrib_funcf_band,
            :actinic_flux,
            :actinic_flux_clear,
            :actinic_flux_band,
            :actinic_flux_clear_band,
            :photolysis_rate,
            :photolysis_rate_clear,
            :photolysis_div,
            :photolysis_div_clear,
            :tot_cloud_cover,
            :cloud_absorptivity,
            :cloud_weight_absorptivity,
            :ls_cloud_absorptivity,
            :ls_cloud_weight_absorptivity,
            :cnv_cloud_absorptivity,
            :cnv_cloud_weight_absorptivity,
            :cloud_extinction,
            :cloud_weight_extinction,
            :ls_cloud_extinction,
            :ls_cloud_weight_extinction,
            :cnv_cloud_extinction,
            :cnv_cloud_weight_extinction,
            :aerosol_absorption_band,
            :aerosol_scattering_band,
            :aerosol_asymmetry_band,
            :spherical_path,
        )
            loc = Ref{Ptr{Cdouble}}()
            ndim = Ref{Cint}(10)
            dims = zeros(Cint, ndim[])
            lbounds = zeros(Cint, ndim[])
            field_ok = ccall(
                (:PS_StrOut_get_real_array, libSOCRATES_C),
                Cuchar, 
                (Ptr{Cvoid}, Cstring, Ref{Ptr{Cdouble}}, Ref{Cint}, Ref{Cint}, Ref{Cint}),
                cptr, String(field), loc, dims, ndim, lbounds
            )
            Bool(field_ok) || error("StrOut Cdouble array field $field not present - coding error")
            if loc[] == C_NULL
                return nothing
            else
                a = unsafe_wrap(Array, loc[], Tuple(dims[1:ndim[]]), own=false)
                oa = OffsetArray(a, (lbounds[1:ndim[]] .- 1)...)
                return oa
            end
        else
            return getfield(handle, field)
        end    
           
    end


    function Base.setproperty!(handle::StrOut, field::Symbol, val)
              

        cptr = getfield(handle, :cptr)
        cptr != Ptr{Cvoid}() || error("invalid handle (null cptr)")            

        error("type StrOut has no writeable field $field")            
           
    end

