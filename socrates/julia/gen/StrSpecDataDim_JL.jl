# Autogenerated from src/radiance_core/def_spectrum.F90
# svn revision 1226


    mutable struct StrSpecDataDim{P}
        parent_handle::P
    end


    # this is used to show values in the REPL and when using IJulia
    function Base.show(io::IO, m::MIME"text/plain", handle::StrSpecDataDim)
        println(io, handle)
        dump_properties(io, handle)                
    end


    function Base.propertynames(handle::StrSpecDataDim, private::Bool=false)
        names = [
            :nd_alloc_int,
            :nd_alloc_real,
            :nd_alloc_log,
            :nd_type,
            :nd_band,
            :nd_exclude,
            :nd_k_term,
            :nd_species,
            :nd_scale_variable,
            :nd_continuum,
            :nd_drop_type,
            :nd_ice_type,
            :nd_aerosol_species,
            :nd_aerosol_mr,
            :nd_thermal_coeff,
            :nd_cloud_parameter,
            :nd_humidity,
            :nd_aod_wavel,
            :nd_phase_term,
            :nd_tmp,
            :nd_pre,
            :nd_mix,
            :nd_band_mix_gas,
            :nd_sub_band_k,
            :nd_k_sub_band,
            :nd_sub_band_gas,
            :nd_sub_band,
            :nd_times,
            :nd_cont,
            :nd_t_lookup_cont,
            :nd_k_term_cont,
            :nd_species_sb,
            :nd_gas_frac,
            :nd_pathway,
            :nd_t_lookup_photol,
            :nd_wl_lookup_photol,
        ]

        return names
    end


    function Base.getproperty(handle::StrSpecDataDim, field::Symbol)


        cptr = getfield(getfield(handle, :parent_handle), :cptr)
        cptr != Ptr{Cvoid}() || error("invalid handle (null cptr)")            

        if field in (
            :nd_alloc_int,
            :nd_alloc_real,
            :nd_alloc_log,
            :nd_type,
            :nd_band,
            :nd_exclude,
            :nd_k_term,
            :nd_species,
            :nd_scale_variable,
            :nd_continuum,
            :nd_drop_type,
            :nd_ice_type,
            :nd_aerosol_species,
            :nd_aerosol_mr,
            :nd_thermal_coeff,
            :nd_cloud_parameter,
            :nd_humidity,
            :nd_aod_wavel,
            :nd_phase_term,
            :nd_tmp,
            :nd_pre,
            :nd_mix,
            :nd_band_mix_gas,
            :nd_sub_band_k,
            :nd_k_sub_band,
            :nd_sub_band_gas,
            :nd_sub_band,
            :nd_times,
            :nd_cont,
            :nd_t_lookup_cont,
            :nd_k_term_cont,
            :nd_species_sb,
            :nd_gas_frac,
            :nd_pathway,
            :nd_t_lookup_photol,
            :nd_wl_lookup_photol,
        )
            val = Ref{Cint}()
            field_ok = ccall(
                (:PS_StrSpecDataDim_get_integer, libSOCRATES_C),
                Cuchar,
                (Ptr{Cvoid}, Cstring, Ref{Cint}),
                cptr, String(field), val
            )
            Bool(field_ok) || error("StrSpecDataDim integer field $field not present - coding error")
            return val[]
        else
            return getfield(handle, field)
        end    
           
    end


    function Base.setproperty!(handle::StrSpecDataDim, field::Symbol, val)
              

        cptr = getfield(getfield(handle, :parent_handle), :cptr)
        cptr != Ptr{Cvoid}() || error("invalid handle (null cptr)")            

        if field in (
            :nd_alloc_int,
            :nd_alloc_real,
            :nd_alloc_log,
            :nd_type,
            :nd_band,
            :nd_exclude,
            :nd_k_term,
            :nd_species,
            :nd_scale_variable,
            :nd_continuum,
            :nd_drop_type,
            :nd_ice_type,
            :nd_aerosol_species,
            :nd_aerosol_mr,
            :nd_thermal_coeff,
            :nd_cloud_parameter,
            :nd_humidity,
            :nd_aod_wavel,
            :nd_phase_term,
            :nd_tmp,
            :nd_pre,
            :nd_mix,
            :nd_band_mix_gas,
            :nd_sub_band_k,
            :nd_k_sub_band,
            :nd_sub_band_gas,
            :nd_sub_band,
            :nd_times,
            :nd_cont,
            :nd_t_lookup_cont,
            :nd_k_term_cont,
            :nd_species_sb,
            :nd_gas_frac,
            :nd_pathway,
            :nd_t_lookup_photol,
            :nd_wl_lookup_photol,
        )
                    
            field_ok = ccall(
                (:PS_StrSpecDataDim_set_integer, libSOCRATES_C),
                Cuchar,
                (Ptr{Cvoid}, Cstring, Cint),
                cptr, String(field), val
            )
            Bool(field_ok) || error("StrSpecDataDim integer field $field not present - coding error")
            return val
        else
            error("type StrSpecDataDim has no writeable field $field")    
        end    
           
    end

