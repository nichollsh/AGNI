# Autogenerated from src/radiance_core/def_spectrum.F90
# svn revision 1226


    mutable struct StrSpecDataGas{P}
        parent_handle::P
    end


    # this is used to show values in the REPL and when using IJulia
    function Base.show(io::IO, m::MIME"text/plain", handle::StrSpecDataGas)
        println(io, handle)
        dump_properties(io, handle)                
    end


    function Base.propertynames(handle::StrSpecDataGas, private::Bool=false)
        names = [
            :n_absorb,
            :n_absorb_sb,
            :n_gas_frac,
            :n_band_absorb,
            :index_absorb,
            :index_sb,
            :type_absorb,
            :n_mix_gas,
            :index_mix_gas,
            :num_mix,
            :mix_gas_band,
            :num_ref_p,
            :num_ref_t,
            :i_band_k,
            :i_band_k_ses,
            :i_scale_k,
            :i_scale_fnc,
            :i_scat,
            :i_overlap,
            :l_self_broadening,
            :k,
            :w,
            :scale,
            :p_ref,
            :t_ref,
            :p_lookup,
            :t_lookup,
            :gf_lookup,
            :k_lookup,
            :k_lookup_sb,
            :w_ses,
            :k_mix_gas,
            :f_mix,
            :l_doppler,
            :doppler_cor,
            :n_sub_band_gas,
            :sub_band_k,
            :sub_band_w,
            :wavelength_sub_band,
        ]

        return names
    end


    function Base.getproperty(handle::StrSpecDataGas, field::Symbol)


        cptr = getfield(getfield(handle, :parent_handle), :cptr)
        cptr != Ptr{Cvoid}() || error("invalid handle (null cptr)")            

        if field in (
            :n_absorb,
            :n_absorb_sb,
            :n_gas_frac,
        )
            val = Ref{Cint}()
            field_ok = ccall(
                (:PS_StrSpecDataGas_get_integer, libSOCRATES_C),
                Cuchar,
                (Ptr{Cvoid}, Cstring, Ref{Cint}),
                cptr, String(field), val
            )
            Bool(field_ok) || error("StrSpecDataGas integer field $field not present - coding error")
            return val[]
        elseif field in (
            :l_self_broadening,
            :l_doppler,
        )
            loc = Ref{Ptr{Cint}}()
            ndim = Ref{Cint}(10)
            dims = zeros(Cint, ndim[])
            lbounds = zeros(Cint, ndim[])
            field_ok = ccall(
                (:PS_StrSpecDataGas_get_logical_array, libSOCRATES_C),
                Cuchar, 
                (Ptr{Cvoid}, Cstring, Ref{Ptr{Cint}}, Ref{Cint}, Ref{Cint}, Ref{Cint}),
                cptr, String(field), loc, dims, ndim, lbounds
            )
            Bool(field_ok) || error("StrSpecDataGas Cint array field $field not present - coding error")
            if loc[] == C_NULL
                return nothing
            else
                a = unsafe_wrap(Array, loc[], Tuple(dims[1:ndim[]]), own=false)
                oa = OffsetArray(a, (lbounds[1:ndim[]] .- 1)...)
                return oa
            end
        elseif field in (
            :n_band_absorb,
            :index_absorb,
            :index_sb,
            :type_absorb,
            :n_mix_gas,
            :index_mix_gas,
            :num_mix,
            :mix_gas_band,
            :num_ref_p,
            :num_ref_t,
            :i_band_k,
            :i_band_k_ses,
            :i_scale_k,
            :i_scale_fnc,
            :i_scat,
            :i_overlap,
            :n_sub_band_gas,
            :sub_band_k,
        )
            loc = Ref{Ptr{Cint}}()
            ndim = Ref{Cint}(10)
            dims = zeros(Cint, ndim[])
            lbounds = zeros(Cint, ndim[])
            field_ok = ccall(
                (:PS_StrSpecDataGas_get_integer_array, libSOCRATES_C),
                Cuchar, 
                (Ptr{Cvoid}, Cstring, Ref{Ptr{Cint}}, Ref{Cint}, Ref{Cint}, Ref{Cint}),
                cptr, String(field), loc, dims, ndim, lbounds
            )
            Bool(field_ok) || error("StrSpecDataGas Cint array field $field not present - coding error")
            if loc[] == C_NULL
                return nothing
            else
                a = unsafe_wrap(Array, loc[], Tuple(dims[1:ndim[]]), own=false)
                oa = OffsetArray(a, (lbounds[1:ndim[]] .- 1)...)
                return oa
            end
        elseif field in (
            :k,
            :w,
            :scale,
            :p_ref,
            :t_ref,
            :p_lookup,
            :t_lookup,
            :gf_lookup,
            :k_lookup,
            :k_lookup_sb,
            :w_ses,
            :k_mix_gas,
            :f_mix,
            :doppler_cor,
            :sub_band_w,
            :wavelength_sub_band,
        )
            loc = Ref{Ptr{Cdouble}}()
            ndim = Ref{Cint}(10)
            dims = zeros(Cint, ndim[])
            lbounds = zeros(Cint, ndim[])
            field_ok = ccall(
                (:PS_StrSpecDataGas_get_real_array, libSOCRATES_C),
                Cuchar, 
                (Ptr{Cvoid}, Cstring, Ref{Ptr{Cdouble}}, Ref{Cint}, Ref{Cint}, Ref{Cint}),
                cptr, String(field), loc, dims, ndim, lbounds
            )
            Bool(field_ok) || error("StrSpecDataGas Cdouble array field $field not present - coding error")
            if loc[] == C_NULL
                return nothing
            else
                a = unsafe_wrap(Array, loc[], Tuple(dims[1:ndim[]]), own=false)
                oa = OffsetArray(a, (lbounds[1:ndim[]] .- 1)...)
                return oa
            end
        else
            return getfield(handle, field)
        end    
           
    end


    function Base.setproperty!(handle::StrSpecDataGas, field::Symbol, val)
              

        cptr = getfield(getfield(handle, :parent_handle), :cptr)
        cptr != Ptr{Cvoid}() || error("invalid handle (null cptr)")            

        if field in (
            :n_absorb,
            :n_absorb_sb,
            :n_gas_frac,
        )
                    
            field_ok = ccall(
                (:PS_StrSpecDataGas_set_integer, libSOCRATES_C),
                Cuchar,
                (Ptr{Cvoid}, Cstring, Cint),
                cptr, String(field), val
            )
            Bool(field_ok) || error("StrSpecDataGas integer field $field not present - coding error")
            return val
        else
            error("type StrSpecDataGas has no writeable field $field")    
        end    
           
    end

