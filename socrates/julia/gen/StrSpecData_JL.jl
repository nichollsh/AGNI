# Autogenerated from src/radiance_core/def_spectrum.F90
# svn revision 1226


    mutable struct StrSpecData
        cptr::Ptr{Cvoid}

        function StrSpecData()
            handle = new(ccall((:PS_create_StrSpecData, libSOCRATES_C), Ptr{Cvoid}, ()))
            finalizer(delete_StrSpecData, handle)
            return handle
        end
    end

    function delete_StrSpecData(handle::StrSpecData)
        if getfield(handle, :cptr) == Ptr{Cvoid}()
            ccall(:jl_safe_printf, Cvoid, (Cstring, ), "error: delete_StrSpecData attempt to delete null pointer")
        else
            ccall((:PS_delete_StrSpecData, libSOCRATES_C), Cvoid, (Ptr{Cvoid},), getfield(handle, :cptr))
            setfield!(handle, :cptr, Ptr{Cvoid}())
        end
        return nothing
    end


    # this is used to show values in the REPL and when using IJulia
    function Base.show(io::IO, m::MIME"text/plain", handle::StrSpecData)
        println(io, handle)
        dump_properties(io, handle)                
    end


    function Base.propertynames(handle::StrSpecData, private::Bool=false)
        names = [
            :Dim,
            :Basic,
            :Solar,
            :Rayleigh,
            :Gas,
            :Planck,
            :Cont,
            :ContGen,
            :Drop,
            :Aerosol,
            :Ice,
            :Var,
            :Photol,
            :Map,
        ]

        return names
    end


    function Base.getproperty(handle::StrSpecData, field::Symbol)


        cptr = getfield(handle, :cptr)
        cptr != Ptr{Cvoid}() || error("invalid handle (null cptr)")            


        if field == :cptr
            return cptr

        elseif field in (
            :Dim,
        )
            return StrSpecDataDim(handle)  
        elseif field in (
            :Basic,
        )
            return StrSpecDataBasic(handle)  
        elseif field in (
            :Solar,
        )
            return StrSpecDataSolar(handle)  
        elseif field in (
            :Rayleigh,
        )
            return StrSpecDataRayleigh(handle)  
        elseif field in (
            :Gas,
        )
            return StrSpecDataGas(handle)  
        elseif field in (
            :Planck,
        )
            return StrSpecDataPlanck(handle)  
        elseif field in (
            :Cont,
        )
            return StrSpecDataCont(handle)  
        elseif field in (
            :ContGen,
        )
            return StrSpecDataContGen(handle)  
        elseif field in (
            :Drop,
        )
            return StrSpecDataDrop(handle)  
        elseif field in (
            :Aerosol,
        )
            return StrSpecDataAerosol(handle)  
        elseif field in (
            :Ice,
        )
            return StrSpecDataIce(handle)  
        elseif field in (
            :Var,
        )
            return StrSpecDataVar(handle)  
        elseif field in (
            :Photol,
        )
            return StrSpecDataPhotol(handle)  
        elseif field in (
            :Map,
        )
            return StrSpecDataMap(handle)  
        else
            return getfield(handle, field)
        end    
           
    end


    function Base.setproperty!(handle::StrSpecData, field::Symbol, val)
              

        cptr = getfield(handle, :cptr)
        cptr != Ptr{Cvoid}() || error("invalid handle (null cptr)")            

        error("type StrSpecData has no writeable field $field")            
           
    end

