# Autogenerated from src/radiance_core/def_cld.F90
# svn revision 1226


    mutable struct StrCld
        cptr::Ptr{Cvoid}

        function StrCld()
            handle = new(ccall((:PS_create_StrCld, libSOCRATES_C), Ptr{Cvoid}, ()))
            finalizer(delete_StrCld, handle)
            return handle
        end
    end

    function delete_StrCld(handle::StrCld)
        if getfield(handle, :cptr) == Ptr{Cvoid}()
            ccall(:jl_safe_printf, Cvoid, (Cstring, ), "error: delete_StrCld attempt to delete null pointer")
        else
            ccall((:PS_delete_StrCld, libSOCRATES_C), Cvoid, (Ptr{Cvoid},), getfield(handle, :cptr))
            setfield!(handle, :cptr, Ptr{Cvoid}())
        end
        return nothing
    end


    # this is used to show values in the REPL and when using IJulia
    function Base.show(io::IO, m::MIME"text/plain", handle::StrCld)
        println(io, handle)
        dump_properties(io, handle)                
    end


    function Base.propertynames(handle::StrCld, private::Bool=false)
        names = [
            :n_cloud_type,
            :n_condensed,
            :type_condensed,
            :i_cloud_type,
            :i_condensed_param,
            :condensed_n_phf,
            :dp_corr_strat,
            :dp_corr_conv,
            :w_cloud,
            :frac_cloud,
            :condensed_mix_ratio,
            :condensed_dim_char,
            :condensed_param_list,
            :c_cloud,
            :c_ratio,
            :condensed_rel_var_dens,
            :n_opt_level_drop_prsc,
            :n_phase_term_drop_prsc,
            :n_opt_level_ice_prsc,
            :n_phase_term_ice_prsc,
            :drop_pressure_prsc,
            :drop_absorption_prsc,
            :drop_scattering_prsc,
            :drop_phase_fnc_prsc,
            :ice_pressure_prsc,
            :ice_absorption_prsc,
            :ice_scattering_prsc,
            :ice_phase_fnc_prsc,
            :c_sub,
            :frac_cloudy,
            :n_subcol_cld,
            :subcol_k,
            :first_subcol_k,
            :subcol_reorder,
        ]

        return names
    end


    function Base.getproperty(handle::StrCld, field::Symbol)


        cptr = getfield(handle, :cptr)
        cptr != Ptr{Cvoid}() || error("invalid handle (null cptr)")            


        if field == :cptr
            return cptr

        elseif field in (
            :n_cloud_type,
            :n_condensed,
            :n_opt_level_drop_prsc,
            :n_phase_term_drop_prsc,
            :n_opt_level_ice_prsc,
            :n_phase_term_ice_prsc,
        )
            val = Ref{Cint}()
            field_ok = ccall(
                (:PS_StrCld_get_integer, libSOCRATES_C),
                Cuchar,
                (Ptr{Cvoid}, Cstring, Ref{Cint}),
                cptr, String(field), val
            )
            Bool(field_ok) || error("StrCld integer field $field not present - coding error")
            return val[]
        elseif field in (
            :dp_corr_strat,
            :dp_corr_conv,
        )
            val = Ref{Cdouble}()
            field_ok = ccall(
                (:PS_StrCld_get_real, libSOCRATES_C),
                Cuchar,
                (Ptr{Cvoid}, Cstring, Ref{Cdouble}),
                cptr, String(field), val
            )
            Bool(field_ok) || error("StrCld real field $field not present - coding error")
            return val[]
        elseif field in (
            :type_condensed,
            :i_cloud_type,
            :i_condensed_param,
            :condensed_n_phf,
            :n_subcol_cld,
            :subcol_k,
            :first_subcol_k,
            :subcol_reorder,
        )
            loc = Ref{Ptr{Cint}}()
            ndim = Ref{Cint}(10)
            dims = zeros(Cint, ndim[])
            lbounds = zeros(Cint, ndim[])
            field_ok = ccall(
                (:PS_StrCld_get_integer_array, libSOCRATES_C),
                Cuchar, 
                (Ptr{Cvoid}, Cstring, Ref{Ptr{Cint}}, Ref{Cint}, Ref{Cint}, Ref{Cint}),
                cptr, String(field), loc, dims, ndim, lbounds
            )
            Bool(field_ok) || error("StrCld Cint array field $field not present - coding error")
            if loc[] == C_NULL
                return nothing
            else
                a = unsafe_wrap(Array, loc[], Tuple(dims[1:ndim[]]), own=false)
                oa = OffsetArray(a, (lbounds[1:ndim[]] .- 1)...)
                return oa
            end
        elseif field in (
            :w_cloud,
            :frac_cloud,
            :condensed_mix_ratio,
            :condensed_dim_char,
            :condensed_param_list,
            :c_cloud,
            :c_ratio,
            :condensed_rel_var_dens,
            :drop_pressure_prsc,
            :drop_absorption_prsc,
            :drop_scattering_prsc,
            :drop_phase_fnc_prsc,
            :ice_pressure_prsc,
            :ice_absorption_prsc,
            :ice_scattering_prsc,
            :ice_phase_fnc_prsc,
            :c_sub,
            :frac_cloudy,
        )
            loc = Ref{Ptr{Cdouble}}()
            ndim = Ref{Cint}(10)
            dims = zeros(Cint, ndim[])
            lbounds = zeros(Cint, ndim[])
            field_ok = ccall(
                (:PS_StrCld_get_real_array, libSOCRATES_C),
                Cuchar, 
                (Ptr{Cvoid}, Cstring, Ref{Ptr{Cdouble}}, Ref{Cint}, Ref{Cint}, Ref{Cint}),
                cptr, String(field), loc, dims, ndim, lbounds
            )
            Bool(field_ok) || error("StrCld Cdouble array field $field not present - coding error")
            if loc[] == C_NULL
                return nothing
            else
                a = unsafe_wrap(Array, loc[], Tuple(dims[1:ndim[]]), own=false)
                oa = OffsetArray(a, (lbounds[1:ndim[]] .- 1)...)
                return oa
            end
        else
            return getfield(handle, field)
        end    
           
    end


    function Base.setproperty!(handle::StrCld, field::Symbol, val)
              

        cptr = getfield(handle, :cptr)
        cptr != Ptr{Cvoid}() || error("invalid handle (null cptr)")            

        if field in (
            :n_cloud_type,
            :n_condensed,
            :n_opt_level_drop_prsc,
            :n_phase_term_drop_prsc,
            :n_opt_level_ice_prsc,
            :n_phase_term_ice_prsc,
        )
                    
            field_ok = ccall(
                (:PS_StrCld_set_integer, libSOCRATES_C),
                Cuchar,
                (Ptr{Cvoid}, Cstring, Cint),
                cptr, String(field), val
            )
            Bool(field_ok) || error("StrCld integer field $field not present - coding error")
            return val
        elseif field in (
            :dp_corr_strat,
            :dp_corr_conv,
        )
                    
            field_ok = ccall(
                (:PS_StrCld_set_real, libSOCRATES_C),
                Cuchar,
                (Ptr{Cvoid}, Cstring, Cdouble),
                cptr, String(field), val
            )
            Bool(field_ok) || error("StrCld real field $field not present - coding error")
            return val
        else
            error("type StrCld has no writeable field $field")    
        end    
           
    end

