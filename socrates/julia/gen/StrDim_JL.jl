# Autogenerated from src/radiance_core/def_dimen.F90
# svn revision 1226


    mutable struct StrDim
        cptr::Ptr{Cvoid}

        function StrDim()
            handle = new(ccall((:PS_create_StrDim, libSOCRATES_C), Ptr{Cvoid}, ()))
            finalizer(delete_StrDim, handle)
            return handle
        end
    end

    function delete_StrDim(handle::StrDim)
        if getfield(handle, :cptr) == Ptr{Cvoid}()
            ccall(:jl_safe_printf, Cvoid, (Cstring, ), "error: delete_StrDim attempt to delete null pointer")
        else
            ccall((:PS_delete_StrDim, libSOCRATES_C), Cvoid, (Ptr{Cvoid},), getfield(handle, :cptr))
            setfield!(handle, :cptr, Ptr{Cvoid}())
        end
        return nothing
    end


    # this is used to show values in the REPL and when using IJulia
    function Base.show(io::IO, m::MIME"text/plain", handle::StrDim)
        println(io, handle)
        dump_properties(io, handle)                
    end


    function Base.propertynames(handle::StrDim, private::Bool=false)
        names = [
            :nd_profile,
            :nd_layer,
            :nd_layer_clr,
            :id_cloud_top,
            :nd_2sg_profile,
            :nd_flux_profile,
            :nd_radiance_profile,
            :nd_j_profile,
            :nd_channel,
            :nd_max_order,
            :nd_direction,
            :nd_viewing_level,
            :nd_sph_coeff,
            :nd_brdf_basis_fnc,
            :nd_brdf_trunc,
            :nd_tile_type,
            :nd_aerosol_mode,
            :nd_profile_aerosol_prsc,
            :nd_profile_cloud_prsc,
            :nd_opt_level_aerosol_prsc,
            :nd_opt_level_cloud_prsc,
            :nd_phf_term_aerosol_prsc,
            :nd_phf_term_cloud_prsc,
            :nd_cloud_component,
            :nd_cloud_type,
            :nd_cloud_representation,
            :nd_column,
            :nd_subcol_gen,
            :nd_subcol_req,
            :nd_overlap_coeff,
            :nd_source_coeff,
            :nd_region,
            :nd_point_tile,
            :nd_tile,
        ]

        return names
    end


    function Base.getproperty(handle::StrDim, field::Symbol)


        cptr = getfield(handle, :cptr)
        cptr != Ptr{Cvoid}() || error("invalid handle (null cptr)")            


        if field == :cptr
            return cptr

        elseif field in (
            :nd_profile,
            :nd_layer,
            :nd_layer_clr,
            :id_cloud_top,
            :nd_2sg_profile,
            :nd_flux_profile,
            :nd_radiance_profile,
            :nd_j_profile,
            :nd_channel,
            :nd_max_order,
            :nd_direction,
            :nd_viewing_level,
            :nd_sph_coeff,
            :nd_brdf_basis_fnc,
            :nd_brdf_trunc,
            :nd_tile_type,
            :nd_aerosol_mode,
            :nd_profile_aerosol_prsc,
            :nd_profile_cloud_prsc,
            :nd_opt_level_aerosol_prsc,
            :nd_opt_level_cloud_prsc,
            :nd_phf_term_aerosol_prsc,
            :nd_phf_term_cloud_prsc,
            :nd_cloud_component,
            :nd_cloud_type,
            :nd_cloud_representation,
            :nd_column,
            :nd_subcol_gen,
            :nd_subcol_req,
            :nd_overlap_coeff,
            :nd_source_coeff,
            :nd_region,
            :nd_point_tile,
            :nd_tile,
        )
            val = Ref{Cint}()
            field_ok = ccall(
                (:PS_StrDim_get_integer, libSOCRATES_C),
                Cuchar,
                (Ptr{Cvoid}, Cstring, Ref{Cint}),
                cptr, String(field), val
            )
            Bool(field_ok) || error("StrDim integer field $field not present - coding error")
            return val[]
        else
            return getfield(handle, field)
        end    
           
    end


    function Base.setproperty!(handle::StrDim, field::Symbol, val)
              

        cptr = getfield(handle, :cptr)
        cptr != Ptr{Cvoid}() || error("invalid handle (null cptr)")            

        if field in (
            :nd_profile,
            :nd_layer,
            :nd_layer_clr,
            :id_cloud_top,
            :nd_2sg_profile,
            :nd_flux_profile,
            :nd_radiance_profile,
            :nd_j_profile,
            :nd_channel,
            :nd_max_order,
            :nd_direction,
            :nd_viewing_level,
            :nd_sph_coeff,
            :nd_brdf_basis_fnc,
            :nd_brdf_trunc,
            :nd_tile_type,
            :nd_aerosol_mode,
            :nd_profile_aerosol_prsc,
            :nd_profile_cloud_prsc,
            :nd_opt_level_aerosol_prsc,
            :nd_opt_level_cloud_prsc,
            :nd_phf_term_aerosol_prsc,
            :nd_phf_term_cloud_prsc,
            :nd_cloud_component,
            :nd_cloud_type,
            :nd_cloud_representation,
            :nd_column,
            :nd_subcol_gen,
            :nd_subcol_req,
            :nd_overlap_coeff,
            :nd_source_coeff,
            :nd_region,
            :nd_point_tile,
            :nd_tile,
        )
                    
            field_ok = ccall(
                (:PS_StrDim_set_integer, libSOCRATES_C),
                Cuchar,
                (Ptr{Cvoid}, Cstring, Cint),
                cptr, String(field), val
            )
            Bool(field_ok) || error("StrDim integer field $field not present - coding error")
            return val
        else
            error("type StrDim has no writeable field $field")    
        end    
           
    end

