# Autogenerated from src/radiance_core/def_aer.F90
# svn revision 1226


    mutable struct StrAer
        cptr::Ptr{Cvoid}

        function StrAer()
            handle = new(ccall((:PS_create_StrAer, libSOCRATES_C), Ptr{Cvoid}, ()))
            finalizer(delete_StrAer, handle)
            return handle
        end
    end

    function delete_StrAer(handle::StrAer)
        if getfield(handle, :cptr) == Ptr{Cvoid}()
            ccall(:jl_safe_printf, Cvoid, (Cstring, ), "error: delete_StrAer attempt to delete null pointer")
        else
            ccall((:PS_delete_StrAer, libSOCRATES_C), Cvoid, (Ptr{Cvoid},), getfield(handle, :cptr))
            setfield!(handle, :cptr, Ptr{Cvoid}())
        end
        return nothing
    end


    # this is used to show values in the REPL and when using IJulia
    function Base.show(io::IO, m::MIME"text/plain", handle::StrAer)
        println(io, handle)
        dump_properties(io, handle)                
    end


    function Base.propertynames(handle::StrAer, private::Bool=false)
        names = [
            :mr_type_index,
            :mr_source,
            :mix_ratio,
            :mean_rel_humidity,
            :n_mode,
            :mode_mix_ratio,
            :mode_absorption,
            :mode_scattering,
            :mode_asymmetry,
            :n_opt_level_prsc,
            :n_phase_term_prsc,
            :pressure_prsc,
            :absorption_prsc,
            :scattering_prsc,
            :phase_fnc_prsc,
        ]

        return names
    end


    function Base.getproperty(handle::StrAer, field::Symbol)


        cptr = getfield(handle, :cptr)
        cptr != Ptr{Cvoid}() || error("invalid handle (null cptr)")            


        if field == :cptr
            return cptr

        elseif field in (
            :n_mode,
        )
            val = Ref{Cint}()
            field_ok = ccall(
                (:PS_StrAer_get_integer, libSOCRATES_C),
                Cuchar,
                (Ptr{Cvoid}, Cstring, Ref{Cint}),
                cptr, String(field), val
            )
            Bool(field_ok) || error("StrAer integer field $field not present - coding error")
            return val[]
        elseif field in (
            :mr_type_index,
            :mr_source,
            :n_opt_level_prsc,
            :n_phase_term_prsc,
        )
            loc = Ref{Ptr{Cint}}()
            ndim = Ref{Cint}(10)
            dims = zeros(Cint, ndim[])
            lbounds = zeros(Cint, ndim[])
            field_ok = ccall(
                (:PS_StrAer_get_integer_array, libSOCRATES_C),
                Cuchar, 
                (Ptr{Cvoid}, Cstring, Ref{Ptr{Cint}}, Ref{Cint}, Ref{Cint}, Ref{Cint}),
                cptr, String(field), loc, dims, ndim, lbounds
            )
            Bool(field_ok) || error("StrAer Cint array field $field not present - coding error")
            if loc[] == C_NULL
                return nothing
            else
                a = unsafe_wrap(Array, loc[], Tuple(dims[1:ndim[]]), own=false)
                oa = OffsetArray(a, (lbounds[1:ndim[]] .- 1)...)
                return oa
            end
        elseif field in (
            :mix_ratio,
            :mean_rel_humidity,
            :mode_mix_ratio,
            :mode_absorption,
            :mode_scattering,
            :mode_asymmetry,
            :pressure_prsc,
            :absorption_prsc,
            :scattering_prsc,
            :phase_fnc_prsc,
        )
            loc = Ref{Ptr{Cdouble}}()
            ndim = Ref{Cint}(10)
            dims = zeros(Cint, ndim[])
            lbounds = zeros(Cint, ndim[])
            field_ok = ccall(
                (:PS_StrAer_get_real_array, libSOCRATES_C),
                Cuchar, 
                (Ptr{Cvoid}, Cstring, Ref{Ptr{Cdouble}}, Ref{Cint}, Ref{Cint}, Ref{Cint}),
                cptr, String(field), loc, dims, ndim, lbounds
            )
            Bool(field_ok) || error("StrAer Cdouble array field $field not present - coding error")
            if loc[] == C_NULL
                return nothing
            else
                a = unsafe_wrap(Array, loc[], Tuple(dims[1:ndim[]]), own=false)
                oa = OffsetArray(a, (lbounds[1:ndim[]] .- 1)...)
                return oa
            end
        else
            return getfield(handle, field)
        end    
           
    end


    function Base.setproperty!(handle::StrAer, field::Symbol, val)
              

        cptr = getfield(handle, :cptr)
        cptr != Ptr{Cvoid}() || error("invalid handle (null cptr)")            

        if field in (
            :n_mode,
        )
                    
            field_ok = ccall(
                (:PS_StrAer_set_integer, libSOCRATES_C),
                Cuchar,
                (Ptr{Cvoid}, Cstring, Cint),
                cptr, String(field), val
            )
            Bool(field_ok) || error("StrAer integer field $field not present - coding error")
            return val
        else
            error("type StrAer has no writeable field $field")    
        end    
           
    end

